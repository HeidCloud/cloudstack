class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScaleVmProfile:

    def create(self, apiclient, AutoScaleVmProfileFactory, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class SnapshotPolicies:

    def list(self, apiclient, volumeid, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class FromLoadBalancerRule:

    def remove(self, apiclient, id, virtualmachineids, **kwargs):
        pass

class FirewallRule:

    def create(self, apiclient, FirewallRuleFactory, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountToProject:

    def add(self, apiclient, projectid, **kwargs):
        pass

class SecondaryStorage:

    def add(self, apiclient, url, **kwargs):
        pass

class PortForwardingRule:

    def create(self, apiclient, PortForwardingRuleFactory, publicport, virtualmachineid, protocol, ipaddressid, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, publicport, protocol, ipaddressid, privateport, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class ServiceOffering:

    def create(self, apiclient, ServiceOfferingFactory, displaytext, memory, cpunumber, name, cpuspeed, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capacity:

    def list(self, apiclient, **kwargs):
        pass

class S3:

    def add(self, apiclient, secretkey, accesskey, bucket, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class Alerts:

    def list(self, apiclient, **kwargs):
        pass

class ServiceForRouter:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class SecurityGroup:

    def create(self, apiclient, SecurityGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class TrafficType:

    def add(self, apiclient, traffictype, physicalnetworkid, **kwargs):
        pass

    def list(self, apiclient, physicalnetworkid, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class EventTypes:

    def list(self, apiclient):
        pass

class Config:

    def ldap(self, apiclient, queryfilter, hostname, searchbase, **kwargs):
        pass

class Events:

    def list(self, apiclient, **kwargs):
        pass

class Network:

    def create(self, apiclient, NetworkFactory, displaytext, name, networkofferingid, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def restart(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Tags:

    def create(self, apiclient, TagsFactory, resourcetype, resourceids, tags, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, resourcetype, resourceids, **kwargs):
        pass

class SecurityGroupIngress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class CloudIdentifier:

    def get(self, apiclient, userid, **kwargs):
        pass

class User:

    def enable(self, apiclient, id, **kwargs):
        pass

    def get(self, apiclient, userapikey, **kwargs):
        pass

    def lock(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, UserFactory, username, account, firstname, lastname, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Condition:

    def create(self, apiclient, ConditionFactory, threshold, relationaloperator, counterid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UserKeys:

    def register(self, apiclient, id, **kwargs):
        pass

class PrivateGateway:

    def create(self, apiclient, PrivateGatewayFactory, netmask, vlan, ipaddress, gateway, vpcid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Domain:

    def create(self, apiclient, DomainFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class OsTypes:

    def list(self, apiclient, **kwargs):
        pass

class Snapshot:

    def create(self, apiclient, SnapshotFactory, volumeid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Router:

    def destroy(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

class IsoPermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicy:

    def create(self, apiclient, LBStickinessPolicyFactory, lbruleid, methodname, name, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class InstanceGroup:

    def create(self, apiclient, InstanceGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Cluster:

    def add(self, apiclient, clustername, hypervisor, zoneid, clustertype, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountFromProject:

    def delete(self, apiclient, projectid, account, **kwargs):
        pass

class Apis:

    def list(self, apiclient, **kwargs):
        pass

class TrafficMonitor:

    def add(self, apiclient, url, zoneid, **kwargs):
        pass

    def list(self, apiclient, zoneid, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capabilities:

    def list(self, apiclient):
        pass

class NiciraNvpDevice:

    def add(self, apiclient, username, physicalnetworkid, password, hostname, transportzoneuuid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, nvpdeviceid, **kwargs):
        pass

class SnapshotPolicy:

    def create(self, apiclient, SnapshotPolicyFactory, timezone, maxsnaps, schedule, volumeid, intervaltype, **kwargs):
        pass

class IpAddress:

    def disassociate(self, apiclient, id, **kwargs):
        pass

    def associate(self, apiclient, **kwargs):
        pass

class ResourceLimit:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, resourcetype, **kwargs):
        pass

class DefaultZoneForAccount:

    def mark(self, apiclient, account, domainid, zoneid, **kwargs):
        pass

class Volume:

    def migrate(self, apiclient, storageid, volumeid, **kwargs):
        pass

    def create(self, apiclient, VolumeFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def upload(self, apiclient, url, zoneid, name, format, **kwargs):
        pass

    def attach(self, apiclient, id, virtualmachineid, **kwargs):
        pass

    def detach(self, apiclient, **kwargs):
        pass

    def extract(self, apiclient, zoneid, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPC:

    def create(self, apiclient, VPCFactory, cidr, zoneid, displaytext, name, vpcofferingid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def restart(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnGateway:

    def create(self, apiclient, VpnGatewayFactory, vpcid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class TrafficTypeImplementors:

    def list(self, apiclient, **kwargs):
        pass

class VpnConnection:

    def reset(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, VpnConnectionFactory, s2scustomergatewayid, s2svpngatewayid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class CustomCertificate:

    def upload(self, apiclient, domainsuffix, certificate, **kwargs):
        pass

class UsageRecords:

    def list(self, apiclient, startdate, enddate, **kwargs):
        pass

    def generate(self, apiclient, startdate, enddate, **kwargs):
        pass

class StaticNat:

    def enable(self, apiclient, ipaddressid, virtualmachineid, **kwargs):
        pass

    def disable(self, apiclient, ipaddressid, **kwargs):
        pass

class VlanIpRange:

    def create(self, apiclient, VlanIpRangeFactory, startip, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScalePolicy:

    def create(self, apiclient, AutoScalePolicyFactory, action, duration, conditionids, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobs:

    def list(self, apiclient, **kwargs):
        pass

class Remove:

    def ldap(self, apiclient):
        pass

class Iso:

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def register(self, apiclient, url, displaytext, name, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def attach(self, apiclient, id, virtualmachineid, **kwargs):
        pass

    def detach(self, apiclient, virtualmachineid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnUser:

    def add(self, apiclient, username, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def remove(self, apiclient, username, **kwargs):
        pass

class SSHKeyPair:

    def create(self, apiclient, SSHKeyPairFactory, name, **kwargs):
        pass

    def register(self, apiclient, publickey, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, name, **kwargs):
        pass

class PhysicalNetwork:

    def create(self, apiclient, PhysicalNetworkFactory, name, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class IpForwardingRule:

    def create(self, apiclient, IpForwardingRuleFactory, startport, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class ProjectInvitation:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, projectid, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Hypervisors:

    def list(self, apiclient, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScaleVmProfile:

    def create(self, apiclient, AutoScaleVmProfileFactory, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class SnapshotPolicies:

    def list(self, apiclient, volumeid, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class FromLoadBalancerRule:

    def remove(self, apiclient, id, virtualmachineids, **kwargs):
        pass

class FirewallRule:

    def create(self, apiclient, FirewallRuleFactory, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountToProject:

    def add(self, apiclient, projectid, **kwargs):
        pass

class SecondaryStorage:

    def add(self, apiclient, url, **kwargs):
        pass

class PortForwardingRule:

    def create(self, apiclient, PortForwardingRuleFactory, publicport, virtualmachineid, protocol, ipaddressid, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, publicport, protocol, ipaddressid, privateport, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class ServiceOffering:

    def create(self, apiclient, ServiceOfferingFactory, displaytext, memory, cpunumber, name, cpuspeed, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capacity:

    def list(self, apiclient, **kwargs):
        pass

class S3:

    def add(self, apiclient, secretkey, accesskey, bucket, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class Alerts:

    def list(self, apiclient, **kwargs):
        pass

class ServiceForRouter:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class SecurityGroup:

    def create(self, apiclient, SecurityGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class TrafficType:

    def add(self, apiclient, traffictype, physicalnetworkid, **kwargs):
        pass

    def list(self, apiclient, physicalnetworkid, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class EventTypes:

    def list(self, apiclient):
        pass

class Config:

    def ldap(self, apiclient, queryfilter, hostname, searchbase, **kwargs):
        pass

class Events:

    def list(self, apiclient, **kwargs):
        pass

class Network:

    def create(self, apiclient, NetworkFactory, displaytext, name, networkofferingid, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def restart(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Tags:

    def create(self, apiclient, TagsFactory, resourcetype, resourceids, tags, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, resourcetype, resourceids, **kwargs):
        pass

class SecurityGroupIngress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class CloudIdentifier:

    def get(self, apiclient, userid, **kwargs):
        pass

class User:

    def enable(self, apiclient, id, **kwargs):
        pass

    def get(self, apiclient, userapikey, **kwargs):
        pass

    def lock(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, UserFactory, username, account, firstname, lastname, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Condition:

    def create(self, apiclient, ConditionFactory, threshold, relationaloperator, counterid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UserKeys:

    def register(self, apiclient, id, **kwargs):
        pass

class PrivateGateway:

    def create(self, apiclient, PrivateGatewayFactory, netmask, vlan, ipaddress, gateway, vpcid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Domain:

    def create(self, apiclient, DomainFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class OsTypes:

    def list(self, apiclient, **kwargs):
        pass

class Snapshot:

    def create(self, apiclient, SnapshotFactory, volumeid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Router:

    def destroy(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

class IsoPermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicy:

    def create(self, apiclient, LBStickinessPolicyFactory, lbruleid, methodname, name, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class InstanceGroup:

    def create(self, apiclient, InstanceGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Cluster:

    def add(self, apiclient, clustername, hypervisor, zoneid, clustertype, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountFromProject:

    def delete(self, apiclient, projectid, account, **kwargs):
        pass

class Apis:

    def list(self, apiclient, **kwargs):
        pass

class TrafficMonitor:

    def add(self, apiclient, url, zoneid, **kwargs):
        pass

    def list(self, apiclient, zoneid, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capabilities:

    def list(self, apiclient):
        pass

class NiciraNvpDevice:

    def add(self, apiclient, username, physicalnetworkid, password, hostname, transportzoneuuid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, nvpdeviceid, **kwargs):
        pass

class SnapshotPolicy:

    def create(self, apiclient, SnapshotPolicyFactory, timezone, maxsnaps, schedule, volumeid, intervaltype, **kwargs):
        pass

class IpAddress:

    def disassociate(self, apiclient, id, **kwargs):
        pass

    def associate(self, apiclient, **kwargs):
        pass

class ResourceLimit:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, resourcetype, **kwargs):
        pass

class DefaultZoneForAccount:

    def mark(self, apiclient, account, domainid, zoneid, **kwargs):
        pass

class Volume:

    def migrate(self, apiclient, storageid, volumeid, **kwargs):
        pass

    def create(self, apiclient, VolumeFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def upload(self, apiclient, url, zoneid, name, format, **kwargs):
        pass

    def attach(self, apiclient, id, virtualmachineid, **kwargs):
        pass

    def detach(self, apiclient, **kwargs):
        pass

    def extract(self, apiclient, zoneid, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPC:

    def create(self, apiclient, VPCFactory, cidr, zoneid, displaytext, name, vpcofferingid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def restart(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnGateway:

    def create(self, apiclient, VpnGatewayFactory, vpcid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class TrafficTypeImplementors:

    def list(self, apiclient, **kwargs):
        pass

class VpnConnection:

    def reset(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, VpnConnectionFactory, s2scustomergatewayid, s2svpngatewayid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class CustomCertificate:

    def upload(self, apiclient, domainsuffix, certificate, **kwargs):
        pass

class UsageRecords:

    def list(self, apiclient, startdate, enddate, **kwargs):
        pass

    def generate(self, apiclient, startdate, enddate, **kwargs):
        pass

class StaticNat:

    def enable(self, apiclient, ipaddressid, virtualmachineid, **kwargs):
        pass

    def disable(self, apiclient, ipaddressid, **kwargs):
        pass

class VlanIpRange:

    def create(self, apiclient, VlanIpRangeFactory, startip, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScalePolicy:

    def create(self, apiclient, AutoScalePolicyFactory, action, duration, conditionids, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobs:

    def list(self, apiclient, **kwargs):
        pass

class Remove:

    def ldap(self, apiclient):
        pass

class Iso:

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def register(self, apiclient, url, displaytext, name, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def attach(self, apiclient, id, virtualmachineid, **kwargs):
        pass

    def detach(self, apiclient, virtualmachineid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnUser:

    def add(self, apiclient, username, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def remove(self, apiclient, username, **kwargs):
        pass

class SSHKeyPair:

    def create(self, apiclient, SSHKeyPairFactory, name, **kwargs):
        pass

    def register(self, apiclient, publickey, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, name, **kwargs):
        pass

class PhysicalNetwork:

    def create(self, apiclient, PhysicalNetworkFactory, name, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class IpForwardingRule:

    def create(self, apiclient, IpForwardingRuleFactory, startport, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class ProjectInvitation:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, projectid, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScaleVmProfile:

    def create(self, apiclient, AutoScaleVmProfileFactory, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class SnapshotPolicies:

    def list(self, apiclient, volumeid, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class FromLoadBalancerRule:

    def remove(self, apiclient, id, virtualmachineids, **kwargs):
        pass

class FirewallRule:

    def create(self, apiclient, FirewallRuleFactory, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountToProject:

    def add(self, apiclient, projectid, **kwargs):
        pass

class SecondaryStorage:

    def add(self, apiclient, url, **kwargs):
        pass

class PortForwardingRule:

    def create(self, apiclient, PortForwardingRuleFactory, publicport, virtualmachineid, protocol, ipaddressid, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, publicport, protocol, ipaddressid, privateport, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class ServiceOffering:

    def create(self, apiclient, ServiceOfferingFactory, displaytext, memory, cpunumber, name, cpuspeed, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capacity:

    def list(self, apiclient, **kwargs):
        pass

class S3:

    def add(self, apiclient, secretkey, accesskey, bucket, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class Alerts:

    def list(self, apiclient, **kwargs):
        pass

class ServiceForRouter:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class SecurityGroup:

    def create(self, apiclient, SecurityGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class TrafficType:

    def add(self, apiclient, traffictype, physicalnetworkid, **kwargs):
        pass

    def list(self, apiclient, physicalnetworkid, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class EventTypes:

    def list(self, apiclient):
        pass

class Config:

    def ldap(self, apiclient, queryfilter, hostname, searchbase, **kwargs):
        pass

class Events:

    def list(self, apiclient, **kwargs):
        pass

class Network:

    def create(self, apiclient, NetworkFactory, displaytext, name, networkofferingid, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def restart(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Tags:

    def create(self, apiclient, TagsFactory, resourcetype, resourceids, tags, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, resourcetype, resourceids, **kwargs):
        pass

class SecurityGroupIngress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class CloudIdentifier:

    def get(self, apiclient, userid, **kwargs):
        pass

class User:

    def enable(self, apiclient, id, **kwargs):
        pass

    def get(self, apiclient, userapikey, **kwargs):
        pass

    def lock(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, UserFactory, username, account, firstname, lastname, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Condition:

    def create(self, apiclient, ConditionFactory, threshold, relationaloperator, counterid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UserKeys:

    def register(self, apiclient, id, **kwargs):
        pass

class PrivateGateway:

    def create(self, apiclient, PrivateGatewayFactory, netmask, vlan, ipaddress, gateway, vpcid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Domain:

    def create(self, apiclient, DomainFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class OsTypes:

    def list(self, apiclient, **kwargs):
        pass

class Snapshot:

    def create(self, apiclient, SnapshotFactory, volumeid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Router:

    def destroy(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

class IsoPermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicy:

    def create(self, apiclient, LBStickinessPolicyFactory, lbruleid, methodname, name, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class InstanceGroup:

    def create(self, apiclient, InstanceGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Cluster:

    def add(self, apiclient, clustername, hypervisor, zoneid, clustertype, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountFromProject:

    def delete(self, apiclient, projectid, account, **kwargs):
        pass

class Apis:

    def list(self, apiclient, **kwargs):
        pass

class TrafficMonitor:

    def add(self, apiclient, url, zoneid, **kwargs):
        pass

    def list(self, apiclient, zoneid, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capabilities:

    def list(self, apiclient):
        pass

class NiciraNvpDevice:

    def add(self, apiclient, username, physicalnetworkid, password, hostname, transportzoneuuid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, nvpdeviceid, **kwargs):
        pass

class SnapshotPolicy:

    def create(self, apiclient, SnapshotPolicyFactory, timezone, maxsnaps, schedule, volumeid, intervaltype, **kwargs):
        pass

class IpAddress:

    def disassociate(self, apiclient, id, **kwargs):
        pass

    def associate(self, apiclient, **kwargs):
        pass

class ResourceLimit:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, resourcetype, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScaleVmProfile:

    def create(self, apiclient, AutoScaleVmProfileFactory, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class SnapshotPolicies:

    def list(self, apiclient, volumeid, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class FromLoadBalancerRule:

    def remove(self, apiclient, id, virtualmachineids, **kwargs):
        pass

class FirewallRule:

    def create(self, apiclient, FirewallRuleFactory, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountToProject:

    def add(self, apiclient, projectid, **kwargs):
        pass

class SecondaryStorage:

    def add(self, apiclient, url, **kwargs):
        pass

class PortForwardingRule:

    def create(self, apiclient, PortForwardingRuleFactory, publicport, virtualmachineid, protocol, ipaddressid, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, publicport, protocol, ipaddressid, privateport, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class ServiceOffering:

    def create(self, apiclient, ServiceOfferingFactory, displaytext, memory, cpunumber, name, cpuspeed, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capacity:

    def list(self, apiclient, **kwargs):
        pass

class S3:

    def add(self, apiclient, secretkey, accesskey, bucket, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class Alerts:

    def list(self, apiclient, **kwargs):
        pass

class ServiceForRouter:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class SecurityGroup:

    def create(self, apiclient, SecurityGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class TrafficType:

    def add(self, apiclient, traffictype, physicalnetworkid, **kwargs):
        pass

    def list(self, apiclient, physicalnetworkid, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class EventTypes:

    def list(self, apiclient):
        pass

class Config:

    def ldap(self, apiclient, queryfilter, hostname, searchbase, **kwargs):
        pass

class Events:

    def list(self, apiclient, **kwargs):
        pass

class Network:

    def create(self, apiclient, NetworkFactory, displaytext, name, networkofferingid, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def restart(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Tags:

    def create(self, apiclient, TagsFactory, resourcetype, resourceids, tags, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, resourcetype, resourceids, **kwargs):
        pass

class SecurityGroupIngress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class CloudIdentifier:

    def get(self, apiclient, userid, **kwargs):
        pass

class User:

    def enable(self, apiclient, id, **kwargs):
        pass

    def get(self, apiclient, userapikey, **kwargs):
        pass

    def lock(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, UserFactory, username, account, firstname, lastname, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Condition:

    def create(self, apiclient, ConditionFactory, threshold, relationaloperator, counterid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UserKeys:

    def register(self, apiclient, id, **kwargs):
        pass

class PrivateGateway:

    def create(self, apiclient, PrivateGatewayFactory, netmask, vlan, ipaddress, gateway, vpcid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Domain:

    def create(self, apiclient, DomainFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class OsTypes:

    def list(self, apiclient, **kwargs):
        pass

class Snapshot:

    def create(self, apiclient, SnapshotFactory, volumeid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScaleVmProfile:

    def create(self, apiclient, AutoScaleVmProfileFactory, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class SnapshotPolicies:

    def list(self, apiclient, volumeid, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class FromLoadBalancerRule:

    def remove(self, apiclient, id, virtualmachineids, **kwargs):
        pass

class FirewallRule:

    def create(self, apiclient, FirewallRuleFactory, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountToProject:

    def add(self, apiclient, projectid, **kwargs):
        pass

class SecondaryStorage:

    def add(self, apiclient, url, **kwargs):
        pass

class PortForwardingRule:

    def create(self, apiclient, PortForwardingRuleFactory, publicport, virtualmachineid, protocol, ipaddressid, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, publicport, protocol, ipaddressid, privateport, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class ServiceOffering:

    def create(self, apiclient, ServiceOfferingFactory, displaytext, memory, cpunumber, name, cpuspeed, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capacity:

    def list(self, apiclient, **kwargs):
        pass

class S3:

    def add(self, apiclient, secretkey, accesskey, bucket, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class Alerts:

    def list(self, apiclient, **kwargs):
        pass

class ServiceForRouter:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class SecurityGroup:

    def create(self, apiclient, SecurityGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class TrafficType:

    def add(self, apiclient, traffictype, physicalnetworkid, **kwargs):
        pass

    def list(self, apiclient, physicalnetworkid, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class EventTypes:

    def list(self, apiclient):
        pass

class Config:

    def ldap(self, apiclient, queryfilter, hostname, searchbase, **kwargs):
        pass

class Events:

    def list(self, apiclient, **kwargs):
        pass

class Network:

    def create(self, apiclient, NetworkFactory, displaytext, name, networkofferingid, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def restart(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Tags:

    def create(self, apiclient, TagsFactory, resourcetype, resourceids, tags, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, resourcetype, resourceids, **kwargs):
        pass

class SecurityGroupIngress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class CloudIdentifier:

    def get(self, apiclient, userid, **kwargs):
        pass

class User:

    def enable(self, apiclient, id, **kwargs):
        pass

    def get(self, apiclient, userapikey, **kwargs):
        pass

    def lock(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, UserFactory, username, account, firstname, lastname, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Condition:

    def create(self, apiclient, ConditionFactory, threshold, relationaloperator, counterid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UserKeys:

    def register(self, apiclient, id, **kwargs):
        pass

class PrivateGateway:

    def create(self, apiclient, PrivateGatewayFactory, netmask, vlan, ipaddress, gateway, vpcid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Domain:

    def create(self, apiclient, DomainFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class OsTypes:

    def list(self, apiclient, **kwargs):
        pass

class Snapshot:

    def create(self, apiclient, SnapshotFactory, volumeid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Router:

    def destroy(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

class IsoPermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicy:

    def create(self, apiclient, LBStickinessPolicyFactory, lbruleid, methodname, name, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class InstanceGroup:

    def create(self, apiclient, InstanceGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScaleVmProfile:

    def create(self, apiclient, AutoScaleVmProfileFactory, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class SnapshotPolicies:

    def list(self, apiclient, volumeid, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class FromLoadBalancerRule:

    def remove(self, apiclient, id, virtualmachineids, **kwargs):
        pass

class FirewallRule:

    def create(self, apiclient, FirewallRuleFactory, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountToProject:

    def add(self, apiclient, projectid, **kwargs):
        pass

class SecondaryStorage:

    def add(self, apiclient, url, **kwargs):
        pass

class PortForwardingRule:

    def create(self, apiclient, PortForwardingRuleFactory, publicport, virtualmachineid, protocol, ipaddressid, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, publicport, protocol, ipaddressid, privateport, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class ServiceOffering:

    def create(self, apiclient, ServiceOfferingFactory, displaytext, memory, cpunumber, name, cpuspeed, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capacity:

    def list(self, apiclient, **kwargs):
        pass

class S3:

    def add(self, apiclient, secretkey, accesskey, bucket, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class Alerts:

    def list(self, apiclient, **kwargs):
        pass

class ServiceForRouter:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class SecurityGroup:

    def create(self, apiclient, SecurityGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class TrafficType:

    def add(self, apiclient, traffictype, physicalnetworkid, **kwargs):
        pass

    def list(self, apiclient, physicalnetworkid, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class EventTypes:

    def list(self, apiclient):
        pass

class Config:

    def ldap(self, apiclient, queryfilter, hostname, searchbase, **kwargs):
        pass

class Events:

    def list(self, apiclient, **kwargs):
        pass

class Network:

    def create(self, apiclient, NetworkFactory, displaytext, name, networkofferingid, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def restart(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Tags:

    def create(self, apiclient, TagsFactory, resourcetype, resourceids, tags, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, resourcetype, resourceids, **kwargs):
        pass

class SecurityGroupIngress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class CloudIdentifier:

    def get(self, apiclient, userid, **kwargs):
        pass

class User:

    def enable(self, apiclient, id, **kwargs):
        pass

    def get(self, apiclient, userapikey, **kwargs):
        pass

    def lock(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, UserFactory, username, account, firstname, lastname, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Condition:

    def create(self, apiclient, ConditionFactory, threshold, relationaloperator, counterid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UserKeys:

    def register(self, apiclient, id, **kwargs):
        pass

class PrivateGateway:

    def create(self, apiclient, PrivateGatewayFactory, netmask, vlan, ipaddress, gateway, vpcid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Domain:

    def create(self, apiclient, DomainFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class OsTypes:

    def list(self, apiclient, **kwargs):
        pass

class Snapshot:

    def create(self, apiclient, SnapshotFactory, volumeid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Router:

    def destroy(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

class IsoPermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicy:

    def create(self, apiclient, LBStickinessPolicyFactory, lbruleid, methodname, name, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class InstanceGroup:

    def create(self, apiclient, InstanceGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Cluster:

    def add(self, apiclient, clustername, hypervisor, zoneid, clustertype, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountFromProject:

    def delete(self, apiclient, projectid, account, **kwargs):
        pass

class Apis:

    def list(self, apiclient, **kwargs):
        pass

class TrafficMonitor:

    def add(self, apiclient, url, zoneid, **kwargs):
        pass

    def list(self, apiclient, zoneid, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capabilities:

    def list(self, apiclient):
        pass

class NiciraNvpDevice:

    def add(self, apiclient, username, physicalnetworkid, password, hostname, transportzoneuuid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, nvpdeviceid, **kwargs):
        pass

class SnapshotPolicy:

    def create(self, apiclient, SnapshotPolicyFactory, timezone, maxsnaps, schedule, volumeid, intervaltype, **kwargs):
        pass

class IpAddress:

    def disassociate(self, apiclient, id, **kwargs):
        pass

    def associate(self, apiclient, **kwargs):
        pass

class ResourceLimit:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, resourcetype, **kwargs):
        pass

class DefaultZoneForAccount:

    def mark(self, apiclient, account, domainid, zoneid, **kwargs):
        pass

class Volume:

    def migrate(self, apiclient, storageid, volumeid, **kwargs):
        pass

    def create(self, apiclient, VolumeFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def upload(self, apiclient, url, zoneid, name, format, **kwargs):
        pass

    def attach(self, apiclient, id, virtualmachineid, **kwargs):
        pass

    def detach(self, apiclient, **kwargs):
        pass

    def extract(self, apiclient, zoneid, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPC:

    def create(self, apiclient, VPCFactory, cidr, zoneid, displaytext, name, vpcofferingid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def restart(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnGateway:

    def create(self, apiclient, VpnGatewayFactory, vpcid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class TrafficTypeImplementors:

    def list(self, apiclient, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScaleVmProfile:

    def create(self, apiclient, AutoScaleVmProfileFactory, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class SnapshotPolicies:

    def list(self, apiclient, volumeid, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScaleVmProfile:

    def create(self, apiclient, AutoScaleVmProfileFactory, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class SnapshotPolicies:

    def list(self, apiclient, volumeid, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class FromLoadBalancerRule:

    def remove(self, apiclient, id, virtualmachineids, **kwargs):
        pass

class FirewallRule:

    def create(self, apiclient, FirewallRuleFactory, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountToProject:

    def add(self, apiclient, projectid, **kwargs):
        pass

class SecondaryStorage:

    def add(self, apiclient, url, **kwargs):
        pass

class PortForwardingRule:

    def create(self, apiclient, PortForwardingRuleFactory, publicport, virtualmachineid, protocol, ipaddressid, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, publicport, protocol, ipaddressid, privateport, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class ServiceOffering:

    def create(self, apiclient, ServiceOfferingFactory, displaytext, memory, cpunumber, name, cpuspeed, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capacity:

    def list(self, apiclient, **kwargs):
        pass

class S3:

    def add(self, apiclient, secretkey, accesskey, bucket, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class Alerts:

    def list(self, apiclient, **kwargs):
        pass

class ServiceForRouter:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class SecurityGroup:

    def create(self, apiclient, SecurityGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class TrafficType:

    def add(self, apiclient, traffictype, physicalnetworkid, **kwargs):
        pass

    def list(self, apiclient, physicalnetworkid, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class EventTypes:

    def list(self, apiclient):
        pass

class Config:

    def ldap(self, apiclient, queryfilter, hostname, searchbase, **kwargs):
        pass

class Events:

    def list(self, apiclient, **kwargs):
        pass

class Network:

    def create(self, apiclient, NetworkFactory, displaytext, name, networkofferingid, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def restart(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Tags:

    def create(self, apiclient, TagsFactory, resourcetype, resourceids, tags, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, resourcetype, resourceids, **kwargs):
        pass

class SecurityGroupIngress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class CloudIdentifier:

    def get(self, apiclient, userid, **kwargs):
        pass

class User:

    def enable(self, apiclient, id, **kwargs):
        pass

    def get(self, apiclient, userapikey, **kwargs):
        pass

    def lock(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, UserFactory, username, account, firstname, lastname, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Condition:

    def create(self, apiclient, ConditionFactory, threshold, relationaloperator, counterid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UserKeys:

    def register(self, apiclient, id, **kwargs):
        pass

class PrivateGateway:

    def create(self, apiclient, PrivateGatewayFactory, netmask, vlan, ipaddress, gateway, vpcid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Domain:

    def create(self, apiclient, DomainFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class OsTypes:

    def list(self, apiclient, **kwargs):
        pass

class Snapshot:

    def create(self, apiclient, SnapshotFactory, volumeid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Router:

    def destroy(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

class IsoPermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicy:

    def create(self, apiclient, LBStickinessPolicyFactory, lbruleid, methodname, name, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class InstanceGroup:

    def create(self, apiclient, InstanceGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Cluster:

    def add(self, apiclient, clustername, hypervisor, zoneid, clustertype, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountFromProject:

    def delete(self, apiclient, projectid, account, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScaleVmProfile:

    def create(self, apiclient, AutoScaleVmProfileFactory, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class SnapshotPolicies:

    def list(self, apiclient, volumeid, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class FromLoadBalancerRule:

    def remove(self, apiclient, id, virtualmachineids, **kwargs):
        pass

class FirewallRule:

    def create(self, apiclient, FirewallRuleFactory, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountToProject:

    def add(self, apiclient, projectid, **kwargs):
        pass

class SecondaryStorage:

    def add(self, apiclient, url, **kwargs):
        pass

class PortForwardingRule:

    def create(self, apiclient, PortForwardingRuleFactory, publicport, virtualmachineid, protocol, ipaddressid, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, publicport, protocol, ipaddressid, privateport, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class ServiceOffering:

    def create(self, apiclient, ServiceOfferingFactory, displaytext, memory, cpunumber, name, cpuspeed, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capacity:

    def list(self, apiclient, **kwargs):
        pass

class S3:

    def add(self, apiclient, secretkey, accesskey, bucket, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class Alerts:

    def list(self, apiclient, **kwargs):
        pass

class ServiceForRouter:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class SecurityGroup:

    def create(self, apiclient, SecurityGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class TrafficType:

    def add(self, apiclient, traffictype, physicalnetworkid, **kwargs):
        pass

    def list(self, apiclient, physicalnetworkid, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class EventTypes:

    def list(self, apiclient):
        pass

class Config:

    def ldap(self, apiclient, queryfilter, hostname, searchbase, **kwargs):
        pass

class Events:

    def list(self, apiclient, **kwargs):
        pass

class Network:

    def create(self, apiclient, NetworkFactory, displaytext, name, networkofferingid, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def restart(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Tags:

    def create(self, apiclient, TagsFactory, resourcetype, resourceids, tags, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, resourcetype, resourceids, **kwargs):
        pass

class SecurityGroupIngress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class CloudIdentifier:

    def get(self, apiclient, userid, **kwargs):
        pass

class User:

    def enable(self, apiclient, id, **kwargs):
        pass

    def get(self, apiclient, userapikey, **kwargs):
        pass

    def lock(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, UserFactory, username, account, firstname, lastname, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Condition:

    def create(self, apiclient, ConditionFactory, threshold, relationaloperator, counterid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UserKeys:

    def register(self, apiclient, id, **kwargs):
        pass

class PrivateGateway:

    def create(self, apiclient, PrivateGatewayFactory, netmask, vlan, ipaddress, gateway, vpcid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Domain:

    def create(self, apiclient, DomainFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class OsTypes:

    def list(self, apiclient, **kwargs):
        pass

class Snapshot:

    def create(self, apiclient, SnapshotFactory, volumeid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Router:

    def destroy(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

class IsoPermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicy:

    def create(self, apiclient, LBStickinessPolicyFactory, lbruleid, methodname, name, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScaleVmProfile:

    def create(self, apiclient, AutoScaleVmProfileFactory, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class SnapshotPolicies:

    def list(self, apiclient, volumeid, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class FromLoadBalancerRule:

    def remove(self, apiclient, id, virtualmachineids, **kwargs):
        pass

class FirewallRule:

    def create(self, apiclient, FirewallRuleFactory, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountToProject:

    def add(self, apiclient, projectid, **kwargs):
        pass

class SecondaryStorage:

    def add(self, apiclient, url, **kwargs):
        pass

class PortForwardingRule:

    def create(self, apiclient, PortForwardingRuleFactory, publicport, virtualmachineid, protocol, ipaddressid, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, publicport, protocol, ipaddressid, privateport, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class ServiceOffering:

    def create(self, apiclient, ServiceOfferingFactory, displaytext, memory, cpunumber, name, cpuspeed, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capacity:

    def list(self, apiclient, **kwargs):
        pass

class S3:

    def add(self, apiclient, secretkey, accesskey, bucket, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class Alerts:

    def list(self, apiclient, **kwargs):
        pass

class ServiceForRouter:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class SecurityGroup:

    def create(self, apiclient, SecurityGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class TrafficType:

    def add(self, apiclient, traffictype, physicalnetworkid, **kwargs):
        pass

    def list(self, apiclient, physicalnetworkid, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class EventTypes:

    def list(self, apiclient):
        pass

class Config:

    def ldap(self, apiclient, queryfilter, hostname, searchbase, **kwargs):
        pass

class Events:

    def list(self, apiclient, **kwargs):
        pass

class Network:

    def create(self, apiclient, NetworkFactory, displaytext, name, networkofferingid, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def restart(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Tags:

    def create(self, apiclient, TagsFactory, resourcetype, resourceids, tags, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, resourcetype, resourceids, **kwargs):
        pass

class SecurityGroupIngress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class CloudIdentifier:

    def get(self, apiclient, userid, **kwargs):
        pass

class User:

    def enable(self, apiclient, id, **kwargs):
        pass

    def get(self, apiclient, userapikey, **kwargs):
        pass

    def lock(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, UserFactory, username, account, firstname, lastname, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Condition:

    def create(self, apiclient, ConditionFactory, threshold, relationaloperator, counterid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UserKeys:

    def register(self, apiclient, id, **kwargs):
        pass

class PrivateGateway:

    def create(self, apiclient, PrivateGatewayFactory, netmask, vlan, ipaddress, gateway, vpcid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Domain:

    def create(self, apiclient, DomainFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class OsTypes:

    def list(self, apiclient, **kwargs):
        pass

class Snapshot:

    def create(self, apiclient, SnapshotFactory, volumeid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Router:

    def destroy(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScaleVmProfile:

    def create(self, apiclient, AutoScaleVmProfileFactory, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class SnapshotPolicies:

    def list(self, apiclient, volumeid, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class FromLoadBalancerRule:

    def remove(self, apiclient, id, virtualmachineids, **kwargs):
        pass

class FirewallRule:

    def create(self, apiclient, FirewallRuleFactory, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountToProject:

    def add(self, apiclient, projectid, **kwargs):
        pass

class SecondaryStorage:

    def add(self, apiclient, url, **kwargs):
        pass

class PortForwardingRule:

    def create(self, apiclient, PortForwardingRuleFactory, publicport, virtualmachineid, protocol, ipaddressid, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, publicport, protocol, ipaddressid, privateport, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class ServiceOffering:

    def create(self, apiclient, ServiceOfferingFactory, displaytext, memory, cpunumber, name, cpuspeed, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capacity:

    def list(self, apiclient, **kwargs):
        pass

class S3:

    def add(self, apiclient, secretkey, accesskey, bucket, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class Alerts:

    def list(self, apiclient, **kwargs):
        pass

class ServiceForRouter:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class SecurityGroup:

    def create(self, apiclient, SecurityGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class TrafficType:

    def add(self, apiclient, traffictype, physicalnetworkid, **kwargs):
        pass

    def list(self, apiclient, physicalnetworkid, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class EventTypes:

    def list(self, apiclient):
        pass

class Config:

    def ldap(self, apiclient, queryfilter, hostname, searchbase, **kwargs):
        pass

class Events:

    def list(self, apiclient, **kwargs):
        pass

class Network:

    def create(self, apiclient, NetworkFactory, displaytext, name, networkofferingid, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def restart(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Tags:

    def create(self, apiclient, TagsFactory, resourcetype, resourceids, tags, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, resourcetype, resourceids, **kwargs):
        pass

class SecurityGroupIngress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class CloudIdentifier:

    def get(self, apiclient, userid, **kwargs):
        pass

class User:

    def enable(self, apiclient, id, **kwargs):
        pass

    def get(self, apiclient, userapikey, **kwargs):
        pass

    def lock(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, UserFactory, username, account, firstname, lastname, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Condition:

    def create(self, apiclient, ConditionFactory, threshold, relationaloperator, counterid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UserKeys:

    def register(self, apiclient, id, **kwargs):
        pass

class PrivateGateway:

    def create(self, apiclient, PrivateGatewayFactory, netmask, vlan, ipaddress, gateway, vpcid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScaleVmProfile:

    def create(self, apiclient, AutoScaleVmProfileFactory, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class SnapshotPolicies:

    def list(self, apiclient, volumeid, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class FromLoadBalancerRule:

    def remove(self, apiclient, id, virtualmachineids, **kwargs):
        pass

class FirewallRule:

    def create(self, apiclient, FirewallRuleFactory, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountToProject:

    def add(self, apiclient, projectid, **kwargs):
        pass

class SecondaryStorage:

    def add(self, apiclient, url, **kwargs):
        pass

class PortForwardingRule:

    def create(self, apiclient, PortForwardingRuleFactory, publicport, virtualmachineid, protocol, ipaddressid, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, publicport, protocol, ipaddressid, privateport, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class ServiceOffering:

    def create(self, apiclient, ServiceOfferingFactory, displaytext, memory, cpunumber, name, cpuspeed, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capacity:

    def list(self, apiclient, **kwargs):
        pass

class S3:

    def add(self, apiclient, secretkey, accesskey, bucket, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class Alerts:

    def list(self, apiclient, **kwargs):
        pass

class ServiceForRouter:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class SecurityGroup:

    def create(self, apiclient, SecurityGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class TrafficType:

    def add(self, apiclient, traffictype, physicalnetworkid, **kwargs):
        pass

    def list(self, apiclient, physicalnetworkid, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class EventTypes:

    def list(self, apiclient):
        pass

class Config:

    def ldap(self, apiclient, queryfilter, hostname, searchbase, **kwargs):
        pass

class Events:

    def list(self, apiclient, **kwargs):
        pass

class Network:

    def create(self, apiclient, NetworkFactory, displaytext, name, networkofferingid, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def restart(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Tags:

    def create(self, apiclient, TagsFactory, resourcetype, resourceids, tags, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, resourcetype, resourceids, **kwargs):
        pass

class SecurityGroupIngress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class CloudIdentifier:

    def get(self, apiclient, userid, **kwargs):
        pass

class User:

    def enable(self, apiclient, id, **kwargs):
        pass

    def get(self, apiclient, userapikey, **kwargs):
        pass

    def lock(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, UserFactory, username, account, firstname, lastname, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Condition:

    def create(self, apiclient, ConditionFactory, threshold, relationaloperator, counterid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UserKeys:

    def register(self, apiclient, id, **kwargs):
        pass

class PrivateGateway:

    def create(self, apiclient, PrivateGatewayFactory, netmask, vlan, ipaddress, gateway, vpcid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Domain:

    def create(self, apiclient, DomainFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class OsTypes:

    def list(self, apiclient, **kwargs):
        pass

class Snapshot:

    def create(self, apiclient, SnapshotFactory, volumeid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Router:

    def destroy(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

class IsoPermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicy:

    def create(self, apiclient, LBStickinessPolicyFactory, lbruleid, methodname, name, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class InstanceGroup:

    def create(self, apiclient, InstanceGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Cluster:

    def add(self, apiclient, clustername, hypervisor, zoneid, clustertype, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountFromProject:

    def delete(self, apiclient, projectid, account, **kwargs):
        pass

class Apis:

    def list(self, apiclient, **kwargs):
        pass

class TrafficMonitor:

    def add(self, apiclient, url, zoneid, **kwargs):
        pass

    def list(self, apiclient, zoneid, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capabilities:

    def list(self, apiclient):
        pass

class NiciraNvpDevice:

    def add(self, apiclient, username, physicalnetworkid, password, hostname, transportzoneuuid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, nvpdeviceid, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScaleVmProfile:

    def create(self, apiclient, AutoScaleVmProfileFactory, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class SnapshotPolicies:

    def list(self, apiclient, volumeid, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class FromLoadBalancerRule:

    def remove(self, apiclient, id, virtualmachineids, **kwargs):
        pass

class FirewallRule:

    def create(self, apiclient, FirewallRuleFactory, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountToProject:

    def add(self, apiclient, projectid, **kwargs):
        pass

class SecondaryStorage:

    def add(self, apiclient, url, **kwargs):
        pass

class PortForwardingRule:

    def create(self, apiclient, PortForwardingRuleFactory, publicport, virtualmachineid, protocol, ipaddressid, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, publicport, protocol, ipaddressid, privateport, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class ServiceOffering:

    def create(self, apiclient, ServiceOfferingFactory, displaytext, memory, cpunumber, name, cpuspeed, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capacity:

    def list(self, apiclient, **kwargs):
        pass

class S3:

    def add(self, apiclient, secretkey, accesskey, bucket, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class Alerts:

    def list(self, apiclient, **kwargs):
        pass

class ServiceForRouter:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class SecurityGroup:

    def create(self, apiclient, SecurityGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScaleVmProfile:

    def create(self, apiclient, AutoScaleVmProfileFactory, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class SnapshotPolicies:

    def list(self, apiclient, volumeid, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class FromLoadBalancerRule:

    def remove(self, apiclient, id, virtualmachineids, **kwargs):
        pass

class FirewallRule:

    def create(self, apiclient, FirewallRuleFactory, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountToProject:

    def add(self, apiclient, projectid, **kwargs):
        pass

class SecondaryStorage:

    def add(self, apiclient, url, **kwargs):
        pass

class PortForwardingRule:

    def create(self, apiclient, PortForwardingRuleFactory, publicport, virtualmachineid, protocol, ipaddressid, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, publicport, protocol, ipaddressid, privateport, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class ServiceOffering:

    def create(self, apiclient, ServiceOfferingFactory, displaytext, memory, cpunumber, name, cpuspeed, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capacity:

    def list(self, apiclient, **kwargs):
        pass

class S3:

    def add(self, apiclient, secretkey, accesskey, bucket, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class Alerts:

    def list(self, apiclient, **kwargs):
        pass

class ServiceForRouter:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class SecurityGroup:

    def create(self, apiclient, SecurityGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class TrafficType:

    def add(self, apiclient, traffictype, physicalnetworkid, **kwargs):
        pass

    def list(self, apiclient, physicalnetworkid, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class EventTypes:

    def list(self, apiclient):
        pass

class Config:

    def ldap(self, apiclient, queryfilter, hostname, searchbase, **kwargs):
        pass

class Events:

    def list(self, apiclient, **kwargs):
        pass

class Network:

    def create(self, apiclient, NetworkFactory, displaytext, name, networkofferingid, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def restart(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Tags:

    def create(self, apiclient, TagsFactory, resourcetype, resourceids, tags, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, resourcetype, resourceids, **kwargs):
        pass

class SecurityGroupIngress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class CloudIdentifier:

    def get(self, apiclient, userid, **kwargs):
        pass

class User:

    def enable(self, apiclient, id, **kwargs):
        pass

    def get(self, apiclient, userapikey, **kwargs):
        pass

    def lock(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, UserFactory, username, account, firstname, lastname, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Condition:

    def create(self, apiclient, ConditionFactory, threshold, relationaloperator, counterid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UserKeys:

    def register(self, apiclient, id, **kwargs):
        pass

class PrivateGateway:

    def create(self, apiclient, PrivateGatewayFactory, netmask, vlan, ipaddress, gateway, vpcid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Domain:

    def create(self, apiclient, DomainFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class OsTypes:

    def list(self, apiclient, **kwargs):
        pass

class Snapshot:

    def create(self, apiclient, SnapshotFactory, volumeid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Router:

    def destroy(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

class IsoPermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicy:

    def create(self, apiclient, LBStickinessPolicyFactory, lbruleid, methodname, name, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class InstanceGroup:

    def create(self, apiclient, InstanceGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Cluster:

    def add(self, apiclient, clustername, hypervisor, zoneid, clustertype, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountFromProject:

    def delete(self, apiclient, projectid, account, **kwargs):
        pass

class Apis:

    def list(self, apiclient, **kwargs):
        pass

class TrafficMonitor:

    def add(self, apiclient, url, zoneid, **kwargs):
        pass

    def list(self, apiclient, zoneid, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capabilities:

    def list(self, apiclient):
        pass

class NiciraNvpDevice:

    def add(self, apiclient, username, physicalnetworkid, password, hostname, transportzoneuuid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, nvpdeviceid, **kwargs):
        pass

class SnapshotPolicy:

    def create(self, apiclient, SnapshotPolicyFactory, timezone, maxsnaps, schedule, volumeid, intervaltype, **kwargs):
        pass

class IpAddress:

    def disassociate(self, apiclient, id, **kwargs):
        pass

    def associate(self, apiclient, **kwargs):
        pass

class ResourceLimit:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, resourcetype, **kwargs):
        pass

class DefaultZoneForAccount:

    def mark(self, apiclient, account, domainid, zoneid, **kwargs):
        pass

class Volume:

    def migrate(self, apiclient, storageid, volumeid, **kwargs):
        pass

    def create(self, apiclient, VolumeFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def upload(self, apiclient, url, zoneid, name, format, **kwargs):
        pass

    def attach(self, apiclient, id, virtualmachineid, **kwargs):
        pass

    def detach(self, apiclient, **kwargs):
        pass

    def extract(self, apiclient, zoneid, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPC:

    def create(self, apiclient, VPCFactory, cidr, zoneid, displaytext, name, vpcofferingid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def restart(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnGateway:

    def create(self, apiclient, VpnGatewayFactory, vpcid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class TrafficTypeImplementors:

    def list(self, apiclient, **kwargs):
        pass

class VpnConnection:

    def reset(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, VpnConnectionFactory, s2scustomergatewayid, s2svpngatewayid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class CustomCertificate:

    def upload(self, apiclient, domainsuffix, certificate, **kwargs):
        pass

class UsageRecords:

    def list(self, apiclient, startdate, enddate, **kwargs):
        pass

    def generate(self, apiclient, startdate, enddate, **kwargs):
        pass

class StaticNat:

    def enable(self, apiclient, ipaddressid, virtualmachineid, **kwargs):
        pass

    def disable(self, apiclient, ipaddressid, **kwargs):
        pass

class VlanIpRange:

    def create(self, apiclient, VlanIpRangeFactory, startip, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScalePolicy:

    def create(self, apiclient, AutoScalePolicyFactory, action, duration, conditionids, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScaleVmProfile:

    def create(self, apiclient, AutoScaleVmProfileFactory, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class SnapshotPolicies:

    def list(self, apiclient, volumeid, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class FromLoadBalancerRule:

    def remove(self, apiclient, id, virtualmachineids, **kwargs):
        pass

class FirewallRule:

    def create(self, apiclient, FirewallRuleFactory, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountToProject:

    def add(self, apiclient, projectid, **kwargs):
        pass

class SecondaryStorage:

    def add(self, apiclient, url, **kwargs):
        pass

class PortForwardingRule:

    def create(self, apiclient, PortForwardingRuleFactory, publicport, virtualmachineid, protocol, ipaddressid, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, publicport, protocol, ipaddressid, privateport, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class ServiceOffering:

    def create(self, apiclient, ServiceOfferingFactory, displaytext, memory, cpunumber, name, cpuspeed, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capacity:

    def list(self, apiclient, **kwargs):
        pass

class S3:

    def add(self, apiclient, secretkey, accesskey, bucket, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class Alerts:

    def list(self, apiclient, **kwargs):
        pass

class ServiceForRouter:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class SecurityGroup:

    def create(self, apiclient, SecurityGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class TrafficType:

    def add(self, apiclient, traffictype, physicalnetworkid, **kwargs):
        pass

    def list(self, apiclient, physicalnetworkid, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class EventTypes:

    def list(self, apiclient):
        pass

class Config:

    def ldap(self, apiclient, queryfilter, hostname, searchbase, **kwargs):
        pass

class Events:

    def list(self, apiclient, **kwargs):
        pass

class Network:

    def create(self, apiclient, NetworkFactory, displaytext, name, networkofferingid, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def restart(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Tags:

    def create(self, apiclient, TagsFactory, resourcetype, resourceids, tags, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, resourcetype, resourceids, **kwargs):
        pass

class SecurityGroupIngress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class CloudIdentifier:

    def get(self, apiclient, userid, **kwargs):
        pass

class User:

    def enable(self, apiclient, id, **kwargs):
        pass

    def get(self, apiclient, userapikey, **kwargs):
        pass

    def lock(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, UserFactory, username, account, firstname, lastname, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Condition:

    def create(self, apiclient, ConditionFactory, threshold, relationaloperator, counterid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UserKeys:

    def register(self, apiclient, id, **kwargs):
        pass

class PrivateGateway:

    def create(self, apiclient, PrivateGatewayFactory, netmask, vlan, ipaddress, gateway, vpcid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Domain:

    def create(self, apiclient, DomainFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class OsTypes:

    def list(self, apiclient, **kwargs):
        pass

class Snapshot:

    def create(self, apiclient, SnapshotFactory, volumeid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Router:

    def destroy(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

class IsoPermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicy:

    def create(self, apiclient, LBStickinessPolicyFactory, lbruleid, methodname, name, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class InstanceGroup:

    def create(self, apiclient, InstanceGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Cluster:

    def add(self, apiclient, clustername, hypervisor, zoneid, clustertype, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountFromProject:

    def delete(self, apiclient, projectid, account, **kwargs):
        pass

class Apis:

    def list(self, apiclient, **kwargs):
        pass

class TrafficMonitor:

    def add(self, apiclient, url, zoneid, **kwargs):
        pass

    def list(self, apiclient, zoneid, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capabilities:

    def list(self, apiclient):
        pass

class NiciraNvpDevice:

    def add(self, apiclient, username, physicalnetworkid, password, hostname, transportzoneuuid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, nvpdeviceid, **kwargs):
        pass

class SnapshotPolicy:

    def create(self, apiclient, SnapshotPolicyFactory, timezone, maxsnaps, schedule, volumeid, intervaltype, **kwargs):
        pass

class IpAddress:

    def disassociate(self, apiclient, id, **kwargs):
        pass

    def associate(self, apiclient, **kwargs):
        pass

class ResourceLimit:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, resourcetype, **kwargs):
        pass

class DefaultZoneForAccount:

    def mark(self, apiclient, account, domainid, zoneid, **kwargs):
        pass

class Volume:

    def migrate(self, apiclient, storageid, volumeid, **kwargs):
        pass

    def create(self, apiclient, VolumeFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def upload(self, apiclient, url, zoneid, name, format, **kwargs):
        pass

    def attach(self, apiclient, id, virtualmachineid, **kwargs):
        pass

    def detach(self, apiclient, **kwargs):
        pass

    def extract(self, apiclient, zoneid, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPC:

    def create(self, apiclient, VPCFactory, cidr, zoneid, displaytext, name, vpcofferingid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def restart(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnGateway:

    def create(self, apiclient, VpnGatewayFactory, vpcid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScaleVmProfile:

    def create(self, apiclient, AutoScaleVmProfileFactory, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class SnapshotPolicies:

    def list(self, apiclient, volumeid, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class FromLoadBalancerRule:

    def remove(self, apiclient, id, virtualmachineids, **kwargs):
        pass

class FirewallRule:

    def create(self, apiclient, FirewallRuleFactory, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountToProject:

    def add(self, apiclient, projectid, **kwargs):
        pass

class SecondaryStorage:

    def add(self, apiclient, url, **kwargs):
        pass

class PortForwardingRule:

    def create(self, apiclient, PortForwardingRuleFactory, publicport, virtualmachineid, protocol, ipaddressid, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, publicport, protocol, ipaddressid, privateport, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScaleVmProfile:

    def create(self, apiclient, AutoScaleVmProfileFactory, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class SnapshotPolicies:

    def list(self, apiclient, volumeid, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class FromLoadBalancerRule:

    def remove(self, apiclient, id, virtualmachineids, **kwargs):
        pass

class FirewallRule:

    def create(self, apiclient, FirewallRuleFactory, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountToProject:

    def add(self, apiclient, projectid, **kwargs):
        pass

class SecondaryStorage:

    def add(self, apiclient, url, **kwargs):
        pass

class PortForwardingRule:

    def create(self, apiclient, PortForwardingRuleFactory, publicport, virtualmachineid, protocol, ipaddressid, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, publicport, protocol, ipaddressid, privateport, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class ServiceOffering:

    def create(self, apiclient, ServiceOfferingFactory, displaytext, memory, cpunumber, name, cpuspeed, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capacity:

    def list(self, apiclient, **kwargs):
        pass

class S3:

    def add(self, apiclient, secretkey, accesskey, bucket, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class Alerts:

    def list(self, apiclient, **kwargs):
        pass

class ServiceForRouter:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class SecurityGroup:

    def create(self, apiclient, SecurityGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class TrafficType:

    def add(self, apiclient, traffictype, physicalnetworkid, **kwargs):
        pass

    def list(self, apiclient, physicalnetworkid, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class EventTypes:

    def list(self, apiclient):
        pass

class Config:

    def ldap(self, apiclient, queryfilter, hostname, searchbase, **kwargs):
        pass

class Events:

    def list(self, apiclient, **kwargs):
        pass

class Network:

    def create(self, apiclient, NetworkFactory, displaytext, name, networkofferingid, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def restart(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Tags:

    def create(self, apiclient, TagsFactory, resourcetype, resourceids, tags, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, resourcetype, resourceids, **kwargs):
        pass

class SecurityGroupIngress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class CloudIdentifier:

    def get(self, apiclient, userid, **kwargs):
        pass

class User:

    def enable(self, apiclient, id, **kwargs):
        pass

    def get(self, apiclient, userapikey, **kwargs):
        pass

    def lock(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, UserFactory, username, account, firstname, lastname, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Condition:

    def create(self, apiclient, ConditionFactory, threshold, relationaloperator, counterid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UserKeys:

    def register(self, apiclient, id, **kwargs):
        pass

class PrivateGateway:

    def create(self, apiclient, PrivateGatewayFactory, netmask, vlan, ipaddress, gateway, vpcid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Domain:

    def create(self, apiclient, DomainFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class OsTypes:

    def list(self, apiclient, **kwargs):
        pass

class Snapshot:

    def create(self, apiclient, SnapshotFactory, volumeid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Router:

    def destroy(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

class IsoPermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicy:

    def create(self, apiclient, LBStickinessPolicyFactory, lbruleid, methodname, name, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class InstanceGroup:

    def create(self, apiclient, InstanceGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Cluster:

    def add(self, apiclient, clustername, hypervisor, zoneid, clustertype, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountFromProject:

    def delete(self, apiclient, projectid, account, **kwargs):
        pass

class Apis:

    def list(self, apiclient, **kwargs):
        pass

class TrafficMonitor:

    def add(self, apiclient, url, zoneid, **kwargs):
        pass

    def list(self, apiclient, zoneid, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capabilities:

    def list(self, apiclient):
        pass

class NiciraNvpDevice:

    def add(self, apiclient, username, physicalnetworkid, password, hostname, transportzoneuuid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, nvpdeviceid, **kwargs):
        pass

class SnapshotPolicy:

    def create(self, apiclient, SnapshotPolicyFactory, timezone, maxsnaps, schedule, volumeid, intervaltype, **kwargs):
        pass

class IpAddress:

    def disassociate(self, apiclient, id, **kwargs):
        pass

    def associate(self, apiclient, **kwargs):
        pass

class ResourceLimit:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, resourcetype, **kwargs):
        pass

class DefaultZoneForAccount:

    def mark(self, apiclient, account, domainid, zoneid, **kwargs):
        pass

class Volume:

    def migrate(self, apiclient, storageid, volumeid, **kwargs):
        pass

    def create(self, apiclient, VolumeFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def upload(self, apiclient, url, zoneid, name, format, **kwargs):
        pass

    def attach(self, apiclient, id, virtualmachineid, **kwargs):
        pass

    def detach(self, apiclient, **kwargs):
        pass

    def extract(self, apiclient, zoneid, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPC:

    def create(self, apiclient, VPCFactory, cidr, zoneid, displaytext, name, vpcofferingid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def restart(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnGateway:

    def create(self, apiclient, VpnGatewayFactory, vpcid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class TrafficTypeImplementors:

    def list(self, apiclient, **kwargs):
        pass

class VpnConnection:

    def reset(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, VpnConnectionFactory, s2scustomergatewayid, s2svpngatewayid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class CustomCertificate:

    def upload(self, apiclient, domainsuffix, certificate, **kwargs):
        pass

class UsageRecords:

    def list(self, apiclient, startdate, enddate, **kwargs):
        pass

    def generate(self, apiclient, startdate, enddate, **kwargs):
        pass

class StaticNat:

    def enable(self, apiclient, ipaddressid, virtualmachineid, **kwargs):
        pass

    def disable(self, apiclient, ipaddressid, **kwargs):
        pass

class VlanIpRange:

    def create(self, apiclient, VlanIpRangeFactory, startip, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScalePolicy:

    def create(self, apiclient, AutoScalePolicyFactory, action, duration, conditionids, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobs:

    def list(self, apiclient, **kwargs):
        pass

class Remove:

    def ldap(self, apiclient):
        pass

class Iso:

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def register(self, apiclient, url, displaytext, name, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def attach(self, apiclient, id, virtualmachineid, **kwargs):
        pass

    def detach(self, apiclient, virtualmachineid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnUser:

    def add(self, apiclient, username, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def remove(self, apiclient, username, **kwargs):
        pass

class SSHKeyPair:

    def create(self, apiclient, SSHKeyPairFactory, name, **kwargs):
        pass

    def register(self, apiclient, publickey, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, name, **kwargs):
        pass

class PhysicalNetwork:

    def create(self, apiclient, PhysicalNetworkFactory, name, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class IpForwardingRule:

    def create(self, apiclient, IpForwardingRuleFactory, startport, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScaleVmProfile:

    def create(self, apiclient, AutoScaleVmProfileFactory, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class SnapshotPolicies:

    def list(self, apiclient, volumeid, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class FromLoadBalancerRule:

    def remove(self, apiclient, id, virtualmachineids, **kwargs):
        pass

class FirewallRule:

    def create(self, apiclient, FirewallRuleFactory, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountToProject:

    def add(self, apiclient, projectid, **kwargs):
        pass

class SecondaryStorage:

    def add(self, apiclient, url, **kwargs):
        pass

class PortForwardingRule:

    def create(self, apiclient, PortForwardingRuleFactory, publicport, virtualmachineid, protocol, ipaddressid, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, publicport, protocol, ipaddressid, privateport, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class ServiceOffering:

    def create(self, apiclient, ServiceOfferingFactory, displaytext, memory, cpunumber, name, cpuspeed, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capacity:

    def list(self, apiclient, **kwargs):
        pass

class S3:

    def add(self, apiclient, secretkey, accesskey, bucket, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class Alerts:

    def list(self, apiclient, **kwargs):
        pass

class ServiceForRouter:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class SecurityGroup:

    def create(self, apiclient, SecurityGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class TrafficType:

    def add(self, apiclient, traffictype, physicalnetworkid, **kwargs):
        pass

    def list(self, apiclient, physicalnetworkid, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class EventTypes:

    def list(self, apiclient):
        pass

class Config:

    def ldap(self, apiclient, queryfilter, hostname, searchbase, **kwargs):
        pass

class Events:

    def list(self, apiclient, **kwargs):
        pass

class Network:

    def create(self, apiclient, NetworkFactory, displaytext, name, networkofferingid, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def restart(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Tags:

    def create(self, apiclient, TagsFactory, resourcetype, resourceids, tags, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, resourcetype, resourceids, **kwargs):
        pass

class SecurityGroupIngress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class CloudIdentifier:

    def get(self, apiclient, userid, **kwargs):
        pass

class User:

    def enable(self, apiclient, id, **kwargs):
        pass

    def get(self, apiclient, userapikey, **kwargs):
        pass

    def lock(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, UserFactory, username, account, firstname, lastname, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScaleVmProfile:

    def create(self, apiclient, AutoScaleVmProfileFactory, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class SnapshotPolicies:

    def list(self, apiclient, volumeid, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class FromLoadBalancerRule:

    def remove(self, apiclient, id, virtualmachineids, **kwargs):
        pass

class FirewallRule:

    def create(self, apiclient, FirewallRuleFactory, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountToProject:

    def add(self, apiclient, projectid, **kwargs):
        pass

class SecondaryStorage:

    def add(self, apiclient, url, **kwargs):
        pass

class PortForwardingRule:

    def create(self, apiclient, PortForwardingRuleFactory, publicport, virtualmachineid, protocol, ipaddressid, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, publicport, protocol, ipaddressid, privateport, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class ServiceOffering:

    def create(self, apiclient, ServiceOfferingFactory, displaytext, memory, cpunumber, name, cpuspeed, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capacity:

    def list(self, apiclient, **kwargs):
        pass

class S3:

    def add(self, apiclient, secretkey, accesskey, bucket, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class Alerts:

    def list(self, apiclient, **kwargs):
        pass

class ServiceForRouter:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class SecurityGroup:

    def create(self, apiclient, SecurityGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class TrafficType:

    def add(self, apiclient, traffictype, physicalnetworkid, **kwargs):
        pass

    def list(self, apiclient, physicalnetworkid, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class EventTypes:

    def list(self, apiclient):
        pass

class Config:

    def ldap(self, apiclient, queryfilter, hostname, searchbase, **kwargs):
        pass

class Events:

    def list(self, apiclient, **kwargs):
        pass

class Network:

    def create(self, apiclient, NetworkFactory, displaytext, name, networkofferingid, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def restart(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Tags:

    def create(self, apiclient, TagsFactory, resourcetype, resourceids, tags, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, resourcetype, resourceids, **kwargs):
        pass

class SecurityGroupIngress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class CloudIdentifier:

    def get(self, apiclient, userid, **kwargs):
        pass

class User:

    def enable(self, apiclient, id, **kwargs):
        pass

    def get(self, apiclient, userapikey, **kwargs):
        pass

    def lock(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, UserFactory, username, account, firstname, lastname, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Condition:

    def create(self, apiclient, ConditionFactory, threshold, relationaloperator, counterid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UserKeys:

    def register(self, apiclient, id, **kwargs):
        pass

class PrivateGateway:

    def create(self, apiclient, PrivateGatewayFactory, netmask, vlan, ipaddress, gateway, vpcid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Domain:

    def create(self, apiclient, DomainFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class OsTypes:

    def list(self, apiclient, **kwargs):
        pass

class Snapshot:

    def create(self, apiclient, SnapshotFactory, volumeid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Router:

    def destroy(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

class IsoPermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicy:

    def create(self, apiclient, LBStickinessPolicyFactory, lbruleid, methodname, name, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class InstanceGroup:

    def create(self, apiclient, InstanceGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Cluster:

    def add(self, apiclient, clustername, hypervisor, zoneid, clustertype, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountFromProject:

    def delete(self, apiclient, projectid, account, **kwargs):
        pass

class Apis:

    def list(self, apiclient, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScaleVmProfile:

    def create(self, apiclient, AutoScaleVmProfileFactory, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class SnapshotPolicies:

    def list(self, apiclient, volumeid, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class FromLoadBalancerRule:

    def remove(self, apiclient, id, virtualmachineids, **kwargs):
        pass

class FirewallRule:

    def create(self, apiclient, FirewallRuleFactory, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountToProject:

    def add(self, apiclient, projectid, **kwargs):
        pass

class SecondaryStorage:

    def add(self, apiclient, url, **kwargs):
        pass

class PortForwardingRule:

    def create(self, apiclient, PortForwardingRuleFactory, publicport, virtualmachineid, protocol, ipaddressid, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, publicport, protocol, ipaddressid, privateport, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class ServiceOffering:

    def create(self, apiclient, ServiceOfferingFactory, displaytext, memory, cpunumber, name, cpuspeed, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capacity:

    def list(self, apiclient, **kwargs):
        pass

class S3:

    def add(self, apiclient, secretkey, accesskey, bucket, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class Alerts:

    def list(self, apiclient, **kwargs):
        pass

class ServiceForRouter:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class SecurityGroup:

    def create(self, apiclient, SecurityGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class TrafficType:

    def add(self, apiclient, traffictype, physicalnetworkid, **kwargs):
        pass

    def list(self, apiclient, physicalnetworkid, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class EventTypes:

    def list(self, apiclient):
        pass

class Config:

    def ldap(self, apiclient, queryfilter, hostname, searchbase, **kwargs):
        pass

class Events:

    def list(self, apiclient, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScaleVmProfile:

    def create(self, apiclient, AutoScaleVmProfileFactory, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class SnapshotPolicies:

    def list(self, apiclient, volumeid, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class FromLoadBalancerRule:

    def remove(self, apiclient, id, virtualmachineids, **kwargs):
        pass

class FirewallRule:

    def create(self, apiclient, FirewallRuleFactory, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountToProject:

    def add(self, apiclient, projectid, **kwargs):
        pass

class SecondaryStorage:

    def add(self, apiclient, url, **kwargs):
        pass

class PortForwardingRule:

    def create(self, apiclient, PortForwardingRuleFactory, publicport, virtualmachineid, protocol, ipaddressid, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, publicport, protocol, ipaddressid, privateport, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class ServiceOffering:

    def create(self, apiclient, ServiceOfferingFactory, displaytext, memory, cpunumber, name, cpuspeed, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capacity:

    def list(self, apiclient, **kwargs):
        pass

class S3:

    def add(self, apiclient, secretkey, accesskey, bucket, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class Alerts:

    def list(self, apiclient, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScaleVmProfile:

    def create(self, apiclient, AutoScaleVmProfileFactory, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class SnapshotPolicies:

    def list(self, apiclient, volumeid, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class FromLoadBalancerRule:

    def remove(self, apiclient, id, virtualmachineids, **kwargs):
        pass

class FirewallRule:

    def create(self, apiclient, FirewallRuleFactory, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountToProject:

    def add(self, apiclient, projectid, **kwargs):
        pass

class SecondaryStorage:

    def add(self, apiclient, url, **kwargs):
        pass

class PortForwardingRule:

    def create(self, apiclient, PortForwardingRuleFactory, publicport, virtualmachineid, protocol, ipaddressid, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, publicport, protocol, ipaddressid, privateport, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class ServiceOffering:

    def create(self, apiclient, ServiceOfferingFactory, displaytext, memory, cpunumber, name, cpuspeed, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capacity:

    def list(self, apiclient, **kwargs):
        pass

class S3:

    def add(self, apiclient, secretkey, accesskey, bucket, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class Alerts:

    def list(self, apiclient, **kwargs):
        pass

class ServiceForRouter:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class SecurityGroup:

    def create(self, apiclient, SecurityGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class TrafficType:

    def add(self, apiclient, traffictype, physicalnetworkid, **kwargs):
        pass

    def list(self, apiclient, physicalnetworkid, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class EventTypes:

    def list(self, apiclient):
        pass

class Config:

    def ldap(self, apiclient, queryfilter, hostname, searchbase, **kwargs):
        pass

class Events:

    def list(self, apiclient, **kwargs):
        pass

class Network:

    def create(self, apiclient, NetworkFactory, displaytext, name, networkofferingid, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def restart(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Tags:

    def create(self, apiclient, TagsFactory, resourcetype, resourceids, tags, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, resourcetype, resourceids, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScaleVmProfile:

    def create(self, apiclient, AutoScaleVmProfileFactory, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class SnapshotPolicies:

    def list(self, apiclient, volumeid, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class FromLoadBalancerRule:

    def remove(self, apiclient, id, virtualmachineids, **kwargs):
        pass

class FirewallRule:

    def create(self, apiclient, FirewallRuleFactory, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountToProject:

    def add(self, apiclient, projectid, **kwargs):
        pass

class SecondaryStorage:

    def add(self, apiclient, url, **kwargs):
        pass

class PortForwardingRule:

    def create(self, apiclient, PortForwardingRuleFactory, publicport, virtualmachineid, protocol, ipaddressid, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, publicport, protocol, ipaddressid, privateport, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class ServiceOffering:

    def create(self, apiclient, ServiceOfferingFactory, displaytext, memory, cpunumber, name, cpuspeed, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capacity:

    def list(self, apiclient, **kwargs):
        pass

class S3:

    def add(self, apiclient, secretkey, accesskey, bucket, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class Alerts:

    def list(self, apiclient, **kwargs):
        pass

class ServiceForRouter:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class SecurityGroup:

    def create(self, apiclient, SecurityGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class TrafficType:

    def add(self, apiclient, traffictype, physicalnetworkid, **kwargs):
        pass

    def list(self, apiclient, physicalnetworkid, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class EventTypes:

    def list(self, apiclient):
        pass

class Config:

    def ldap(self, apiclient, queryfilter, hostname, searchbase, **kwargs):
        pass

class Events:

    def list(self, apiclient, **kwargs):
        pass

class Network:

    def create(self, apiclient, NetworkFactory, displaytext, name, networkofferingid, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def restart(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Tags:

    def create(self, apiclient, TagsFactory, resourcetype, resourceids, tags, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, resourcetype, resourceids, **kwargs):
        pass

class SecurityGroupIngress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class CloudIdentifier:

    def get(self, apiclient, userid, **kwargs):
        pass

class User:

    def enable(self, apiclient, id, **kwargs):
        pass

    def get(self, apiclient, userapikey, **kwargs):
        pass

    def lock(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, UserFactory, username, account, firstname, lastname, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Condition:

    def create(self, apiclient, ConditionFactory, threshold, relationaloperator, counterid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UserKeys:

    def register(self, apiclient, id, **kwargs):
        pass

class PrivateGateway:

    def create(self, apiclient, PrivateGatewayFactory, netmask, vlan, ipaddress, gateway, vpcid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Domain:

    def create(self, apiclient, DomainFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class OsTypes:

    def list(self, apiclient, **kwargs):
        pass

class Snapshot:

    def create(self, apiclient, SnapshotFactory, volumeid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Router:

    def destroy(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

class IsoPermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicy:

    def create(self, apiclient, LBStickinessPolicyFactory, lbruleid, methodname, name, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class InstanceGroup:

    def create(self, apiclient, InstanceGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Cluster:

    def add(self, apiclient, clustername, hypervisor, zoneid, clustertype, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountFromProject:

    def delete(self, apiclient, projectid, account, **kwargs):
        pass

class Apis:

    def list(self, apiclient, **kwargs):
        pass

class TrafficMonitor:

    def add(self, apiclient, url, zoneid, **kwargs):
        pass

    def list(self, apiclient, zoneid, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capabilities:

    def list(self, apiclient):
        pass

class NiciraNvpDevice:

    def add(self, apiclient, username, physicalnetworkid, password, hostname, transportzoneuuid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, nvpdeviceid, **kwargs):
        pass

class SnapshotPolicy:

    def create(self, apiclient, SnapshotPolicyFactory, timezone, maxsnaps, schedule, volumeid, intervaltype, **kwargs):
        pass

class IpAddress:

    def disassociate(self, apiclient, id, **kwargs):
        pass

    def associate(self, apiclient, **kwargs):
        pass

class ResourceLimit:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, resourcetype, **kwargs):
        pass

class DefaultZoneForAccount:

    def mark(self, apiclient, account, domainid, zoneid, **kwargs):
        pass

class Volume:

    def migrate(self, apiclient, storageid, volumeid, **kwargs):
        pass

    def create(self, apiclient, VolumeFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def upload(self, apiclient, url, zoneid, name, format, **kwargs):
        pass

    def attach(self, apiclient, id, virtualmachineid, **kwargs):
        pass

    def detach(self, apiclient, **kwargs):
        pass

    def extract(self, apiclient, zoneid, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPC:

    def create(self, apiclient, VPCFactory, cidr, zoneid, displaytext, name, vpcofferingid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def restart(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnGateway:

    def create(self, apiclient, VpnGatewayFactory, vpcid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class TrafficTypeImplementors:

    def list(self, apiclient, **kwargs):
        pass

class VpnConnection:

    def reset(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, VpnConnectionFactory, s2scustomergatewayid, s2svpngatewayid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class CustomCertificate:

    def upload(self, apiclient, domainsuffix, certificate, **kwargs):
        pass

class UsageRecords:

    def list(self, apiclient, startdate, enddate, **kwargs):
        pass

    def generate(self, apiclient, startdate, enddate, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScaleVmProfile:

    def create(self, apiclient, AutoScaleVmProfileFactory, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class SnapshotPolicies:

    def list(self, apiclient, volumeid, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class FromLoadBalancerRule:

    def remove(self, apiclient, id, virtualmachineids, **kwargs):
        pass

class FirewallRule:

    def create(self, apiclient, FirewallRuleFactory, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountToProject:

    def add(self, apiclient, projectid, **kwargs):
        pass

class SecondaryStorage:

    def add(self, apiclient, url, **kwargs):
        pass

class PortForwardingRule:

    def create(self, apiclient, PortForwardingRuleFactory, publicport, virtualmachineid, protocol, ipaddressid, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, publicport, protocol, ipaddressid, privateport, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class ServiceOffering:

    def create(self, apiclient, ServiceOfferingFactory, displaytext, memory, cpunumber, name, cpuspeed, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capacity:

    def list(self, apiclient, **kwargs):
        pass

class S3:

    def add(self, apiclient, secretkey, accesskey, bucket, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class Alerts:

    def list(self, apiclient, **kwargs):
        pass

class ServiceForRouter:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class SecurityGroup:

    def create(self, apiclient, SecurityGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class TrafficType:

    def add(self, apiclient, traffictype, physicalnetworkid, **kwargs):
        pass

    def list(self, apiclient, physicalnetworkid, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class EventTypes:

    def list(self, apiclient):
        pass

class Config:

    def ldap(self, apiclient, queryfilter, hostname, searchbase, **kwargs):
        pass

class Events:

    def list(self, apiclient, **kwargs):
        pass

class Network:

    def create(self, apiclient, NetworkFactory, displaytext, name, networkofferingid, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def restart(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Tags:

    def create(self, apiclient, TagsFactory, resourcetype, resourceids, tags, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, resourcetype, resourceids, **kwargs):
        pass

class SecurityGroupIngress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class CloudIdentifier:

    def get(self, apiclient, userid, **kwargs):
        pass

class User:

    def enable(self, apiclient, id, **kwargs):
        pass

    def get(self, apiclient, userapikey, **kwargs):
        pass

    def lock(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, UserFactory, username, account, firstname, lastname, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Condition:

    def create(self, apiclient, ConditionFactory, threshold, relationaloperator, counterid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UserKeys:

    def register(self, apiclient, id, **kwargs):
        pass

class PrivateGateway:

    def create(self, apiclient, PrivateGatewayFactory, netmask, vlan, ipaddress, gateway, vpcid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Domain:

    def create(self, apiclient, DomainFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class OsTypes:

    def list(self, apiclient, **kwargs):
        pass

class Snapshot:

    def create(self, apiclient, SnapshotFactory, volumeid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Router:

    def destroy(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

class IsoPermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicy:

    def create(self, apiclient, LBStickinessPolicyFactory, lbruleid, methodname, name, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class InstanceGroup:

    def create(self, apiclient, InstanceGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Cluster:

    def add(self, apiclient, clustername, hypervisor, zoneid, clustertype, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountFromProject:

    def delete(self, apiclient, projectid, account, **kwargs):
        pass

class Apis:

    def list(self, apiclient, **kwargs):
        pass

class TrafficMonitor:

    def add(self, apiclient, url, zoneid, **kwargs):
        pass

    def list(self, apiclient, zoneid, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capabilities:

    def list(self, apiclient):
        pass

class NiciraNvpDevice:

    def add(self, apiclient, username, physicalnetworkid, password, hostname, transportzoneuuid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, nvpdeviceid, **kwargs):
        pass

class SnapshotPolicy:

    def create(self, apiclient, SnapshotPolicyFactory, timezone, maxsnaps, schedule, volumeid, intervaltype, **kwargs):
        pass

class IpAddress:

    def disassociate(self, apiclient, id, **kwargs):
        pass

    def associate(self, apiclient, **kwargs):
        pass

class ResourceLimit:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, resourcetype, **kwargs):
        pass

class DefaultZoneForAccount:

    def mark(self, apiclient, account, domainid, zoneid, **kwargs):
        pass

class Volume:

    def migrate(self, apiclient, storageid, volumeid, **kwargs):
        pass

    def create(self, apiclient, VolumeFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def upload(self, apiclient, url, zoneid, name, format, **kwargs):
        pass

    def attach(self, apiclient, id, virtualmachineid, **kwargs):
        pass

    def detach(self, apiclient, **kwargs):
        pass

    def extract(self, apiclient, zoneid, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPC:

    def create(self, apiclient, VPCFactory, cidr, zoneid, displaytext, name, vpcofferingid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def restart(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnGateway:

    def create(self, apiclient, VpnGatewayFactory, vpcid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class TrafficTypeImplementors:

    def list(self, apiclient, **kwargs):
        pass

class VpnConnection:

    def reset(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, VpnConnectionFactory, s2scustomergatewayid, s2svpngatewayid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class CustomCertificate:

    def upload(self, apiclient, domainsuffix, certificate, **kwargs):
        pass

class UsageRecords:

    def list(self, apiclient, startdate, enddate, **kwargs):
        pass

    def generate(self, apiclient, startdate, enddate, **kwargs):
        pass

class StaticNat:

    def enable(self, apiclient, ipaddressid, virtualmachineid, **kwargs):
        pass

    def disable(self, apiclient, ipaddressid, **kwargs):
        pass

class VlanIpRange:

    def create(self, apiclient, VlanIpRangeFactory, startip, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScalePolicy:

    def create(self, apiclient, AutoScalePolicyFactory, action, duration, conditionids, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobs:

    def list(self, apiclient, **kwargs):
        pass

class Remove:

    def ldap(self, apiclient):
        pass

class Iso:

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def register(self, apiclient, url, displaytext, name, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def attach(self, apiclient, id, virtualmachineid, **kwargs):
        pass

    def detach(self, apiclient, virtualmachineid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScaleVmProfile:

    def create(self, apiclient, AutoScaleVmProfileFactory, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class SnapshotPolicies:

    def list(self, apiclient, volumeid, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class FromLoadBalancerRule:

    def remove(self, apiclient, id, virtualmachineids, **kwargs):
        pass

class FirewallRule:

    def create(self, apiclient, FirewallRuleFactory, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountToProject:

    def add(self, apiclient, projectid, **kwargs):
        pass

class SecondaryStorage:

    def add(self, apiclient, url, **kwargs):
        pass

class PortForwardingRule:

    def create(self, apiclient, PortForwardingRuleFactory, publicport, virtualmachineid, protocol, ipaddressid, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, publicport, protocol, ipaddressid, privateport, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class ServiceOffering:

    def create(self, apiclient, ServiceOfferingFactory, displaytext, memory, cpunumber, name, cpuspeed, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScaleVmProfile:

    def create(self, apiclient, AutoScaleVmProfileFactory, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class SnapshotPolicies:

    def list(self, apiclient, volumeid, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class FromLoadBalancerRule:

    def remove(self, apiclient, id, virtualmachineids, **kwargs):
        pass

class FirewallRule:

    def create(self, apiclient, FirewallRuleFactory, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountToProject:

    def add(self, apiclient, projectid, **kwargs):
        pass

class SecondaryStorage:

    def add(self, apiclient, url, **kwargs):
        pass

class PortForwardingRule:

    def create(self, apiclient, PortForwardingRuleFactory, publicport, virtualmachineid, protocol, ipaddressid, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, publicport, protocol, ipaddressid, privateport, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class ServiceOffering:

    def create(self, apiclient, ServiceOfferingFactory, displaytext, memory, cpunumber, name, cpuspeed, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capacity:

    def list(self, apiclient, **kwargs):
        pass

class S3:

    def add(self, apiclient, secretkey, accesskey, bucket, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class Alerts:

    def list(self, apiclient, **kwargs):
        pass

class ServiceForRouter:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class SecurityGroup:

    def create(self, apiclient, SecurityGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class TrafficType:

    def add(self, apiclient, traffictype, physicalnetworkid, **kwargs):
        pass

    def list(self, apiclient, physicalnetworkid, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class EventTypes:

    def list(self, apiclient):
        pass

class Config:

    def ldap(self, apiclient, queryfilter, hostname, searchbase, **kwargs):
        pass

class Events:

    def list(self, apiclient, **kwargs):
        pass

class Network:

    def create(self, apiclient, NetworkFactory, displaytext, name, networkofferingid, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def restart(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Tags:

    def create(self, apiclient, TagsFactory, resourcetype, resourceids, tags, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, resourcetype, resourceids, **kwargs):
        pass

class SecurityGroupIngress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class CloudIdentifier:

    def get(self, apiclient, userid, **kwargs):
        pass

class User:

    def enable(self, apiclient, id, **kwargs):
        pass

    def get(self, apiclient, userapikey, **kwargs):
        pass

    def lock(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, UserFactory, username, account, firstname, lastname, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Condition:

    def create(self, apiclient, ConditionFactory, threshold, relationaloperator, counterid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UserKeys:

    def register(self, apiclient, id, **kwargs):
        pass

class PrivateGateway:

    def create(self, apiclient, PrivateGatewayFactory, netmask, vlan, ipaddress, gateway, vpcid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Domain:

    def create(self, apiclient, DomainFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class OsTypes:

    def list(self, apiclient, **kwargs):
        pass

class Snapshot:

    def create(self, apiclient, SnapshotFactory, volumeid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Router:

    def destroy(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

class IsoPermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicy:

    def create(self, apiclient, LBStickinessPolicyFactory, lbruleid, methodname, name, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class InstanceGroup:

    def create(self, apiclient, InstanceGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Cluster:

    def add(self, apiclient, clustername, hypervisor, zoneid, clustertype, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountFromProject:

    def delete(self, apiclient, projectid, account, **kwargs):
        pass

class Apis:

    def list(self, apiclient, **kwargs):
        pass

class TrafficMonitor:

    def add(self, apiclient, url, zoneid, **kwargs):
        pass

    def list(self, apiclient, zoneid, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capabilities:

    def list(self, apiclient):
        pass

class NiciraNvpDevice:

    def add(self, apiclient, username, physicalnetworkid, password, hostname, transportzoneuuid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, nvpdeviceid, **kwargs):
        pass

class SnapshotPolicy:

    def create(self, apiclient, SnapshotPolicyFactory, timezone, maxsnaps, schedule, volumeid, intervaltype, **kwargs):
        pass

class IpAddress:

    def disassociate(self, apiclient, id, **kwargs):
        pass

    def associate(self, apiclient, **kwargs):
        pass

class ResourceLimit:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, resourcetype, **kwargs):
        pass

class DefaultZoneForAccount:

    def mark(self, apiclient, account, domainid, zoneid, **kwargs):
        pass

class Volume:

    def migrate(self, apiclient, storageid, volumeid, **kwargs):
        pass

    def create(self, apiclient, VolumeFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def upload(self, apiclient, url, zoneid, name, format, **kwargs):
        pass

    def attach(self, apiclient, id, virtualmachineid, **kwargs):
        pass

    def detach(self, apiclient, **kwargs):
        pass

    def extract(self, apiclient, zoneid, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPC:

    def create(self, apiclient, VPCFactory, cidr, zoneid, displaytext, name, vpcofferingid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def restart(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnGateway:

    def create(self, apiclient, VpnGatewayFactory, vpcid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class TrafficTypeImplementors:

    def list(self, apiclient, **kwargs):
        pass

class VpnConnection:

    def reset(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, VpnConnectionFactory, s2scustomergatewayid, s2svpngatewayid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class CustomCertificate:

    def upload(self, apiclient, domainsuffix, certificate, **kwargs):
        pass

class UsageRecords:

    def list(self, apiclient, startdate, enddate, **kwargs):
        pass

    def generate(self, apiclient, startdate, enddate, **kwargs):
        pass

class StaticNat:

    def enable(self, apiclient, ipaddressid, virtualmachineid, **kwargs):
        pass

    def disable(self, apiclient, ipaddressid, **kwargs):
        pass

class VlanIpRange:

    def create(self, apiclient, VlanIpRangeFactory, startip, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScalePolicy:

    def create(self, apiclient, AutoScalePolicyFactory, action, duration, conditionids, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobs:

    def list(self, apiclient, **kwargs):
        pass

class Remove:

    def ldap(self, apiclient):
        pass

class Iso:

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def register(self, apiclient, url, displaytext, name, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def attach(self, apiclient, id, virtualmachineid, **kwargs):
        pass

    def detach(self, apiclient, virtualmachineid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnUser:

    def add(self, apiclient, username, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def remove(self, apiclient, username, **kwargs):
        pass

class SSHKeyPair:

    def create(self, apiclient, SSHKeyPairFactory, name, **kwargs):
        pass

    def register(self, apiclient, publickey, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, name, **kwargs):
        pass

class PhysicalNetwork:

    def create(self, apiclient, PhysicalNetworkFactory, name, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class IpForwardingRule:

    def create(self, apiclient, IpForwardingRuleFactory, startport, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class ProjectInvitation:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, projectid, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Hypervisors:

    def list(self, apiclient, **kwargs):
        pass

class ToLoadBalancerRule:

    def assign(self, apiclient, id, virtualmachineids, **kwargs):
        pass

class DomainChildren:

    def list(self, apiclient, **kwargs):
        pass

class Pod:

    def create(self, apiclient, PodFactory, startip, netmask, zoneid, gateway, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScaleVmProfile:

    def create(self, apiclient, AutoScaleVmProfileFactory, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class SnapshotPolicies:

    def list(self, apiclient, volumeid, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class FromLoadBalancerRule:

    def remove(self, apiclient, id, virtualmachineids, **kwargs):
        pass

class FirewallRule:

    def create(self, apiclient, FirewallRuleFactory, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountToProject:

    def add(self, apiclient, projectid, **kwargs):
        pass

class SecondaryStorage:

    def add(self, apiclient, url, **kwargs):
        pass

class PortForwardingRule:

    def create(self, apiclient, PortForwardingRuleFactory, publicport, virtualmachineid, protocol, ipaddressid, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, publicport, protocol, ipaddressid, privateport, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class ServiceOffering:

    def create(self, apiclient, ServiceOfferingFactory, displaytext, memory, cpunumber, name, cpuspeed, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capacity:

    def list(self, apiclient, **kwargs):
        pass

class S3:

    def add(self, apiclient, secretkey, accesskey, bucket, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class Alerts:

    def list(self, apiclient, **kwargs):
        pass

class ServiceForRouter:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class SecurityGroup:

    def create(self, apiclient, SecurityGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class TrafficType:

    def add(self, apiclient, traffictype, physicalnetworkid, **kwargs):
        pass

    def list(self, apiclient, physicalnetworkid, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScaleVmProfile:

    def create(self, apiclient, AutoScaleVmProfileFactory, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class SnapshotPolicies:

    def list(self, apiclient, volumeid, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class FromLoadBalancerRule:

    def remove(self, apiclient, id, virtualmachineids, **kwargs):
        pass

class FirewallRule:

    def create(self, apiclient, FirewallRuleFactory, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountToProject:

    def add(self, apiclient, projectid, **kwargs):
        pass

class SecondaryStorage:

    def add(self, apiclient, url, **kwargs):
        pass

class PortForwardingRule:

    def create(self, apiclient, PortForwardingRuleFactory, publicport, virtualmachineid, protocol, ipaddressid, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, publicport, protocol, ipaddressid, privateport, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class ServiceOffering:

    def create(self, apiclient, ServiceOfferingFactory, displaytext, memory, cpunumber, name, cpuspeed, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capacity:

    def list(self, apiclient, **kwargs):
        pass

class S3:

    def add(self, apiclient, secretkey, accesskey, bucket, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class Alerts:

    def list(self, apiclient, **kwargs):
        pass

class ServiceForRouter:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class SecurityGroup:

    def create(self, apiclient, SecurityGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class TrafficType:

    def add(self, apiclient, traffictype, physicalnetworkid, **kwargs):
        pass

    def list(self, apiclient, physicalnetworkid, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class EventTypes:

    def list(self, apiclient):
        pass

class Config:

    def ldap(self, apiclient, queryfilter, hostname, searchbase, **kwargs):
        pass

class Events:

    def list(self, apiclient, **kwargs):
        pass

class Network:

    def create(self, apiclient, NetworkFactory, displaytext, name, networkofferingid, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def restart(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Tags:

    def create(self, apiclient, TagsFactory, resourcetype, resourceids, tags, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, resourcetype, resourceids, **kwargs):
        pass

class SecurityGroupIngress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class CloudIdentifier:

    def get(self, apiclient, userid, **kwargs):
        pass

class User:

    def enable(self, apiclient, id, **kwargs):
        pass

    def get(self, apiclient, userapikey, **kwargs):
        pass

    def lock(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, UserFactory, username, account, firstname, lastname, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Condition:

    def create(self, apiclient, ConditionFactory, threshold, relationaloperator, counterid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UserKeys:

    def register(self, apiclient, id, **kwargs):
        pass

class PrivateGateway:

    def create(self, apiclient, PrivateGatewayFactory, netmask, vlan, ipaddress, gateway, vpcid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Domain:

    def create(self, apiclient, DomainFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class OsTypes:

    def list(self, apiclient, **kwargs):
        pass

class Snapshot:

    def create(self, apiclient, SnapshotFactory, volumeid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Router:

    def destroy(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

class IsoPermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicy:

    def create(self, apiclient, LBStickinessPolicyFactory, lbruleid, methodname, name, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class InstanceGroup:

    def create(self, apiclient, InstanceGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Cluster:

    def add(self, apiclient, clustername, hypervisor, zoneid, clustertype, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountFromProject:

    def delete(self, apiclient, projectid, account, **kwargs):
        pass

class Apis:

    def list(self, apiclient, **kwargs):
        pass

class TrafficMonitor:

    def add(self, apiclient, url, zoneid, **kwargs):
        pass

    def list(self, apiclient, zoneid, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capabilities:

    def list(self, apiclient):
        pass

class NiciraNvpDevice:

    def add(self, apiclient, username, physicalnetworkid, password, hostname, transportzoneuuid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, nvpdeviceid, **kwargs):
        pass

class SnapshotPolicy:

    def create(self, apiclient, SnapshotPolicyFactory, timezone, maxsnaps, schedule, volumeid, intervaltype, **kwargs):
        pass

class IpAddress:

    def disassociate(self, apiclient, id, **kwargs):
        pass

    def associate(self, apiclient, **kwargs):
        pass

class ResourceLimit:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, resourcetype, **kwargs):
        pass

class DefaultZoneForAccount:

    def mark(self, apiclient, account, domainid, zoneid, **kwargs):
        pass

class Volume:

    def migrate(self, apiclient, storageid, volumeid, **kwargs):
        pass

    def create(self, apiclient, VolumeFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def upload(self, apiclient, url, zoneid, name, format, **kwargs):
        pass

    def attach(self, apiclient, id, virtualmachineid, **kwargs):
        pass

    def detach(self, apiclient, **kwargs):
        pass

    def extract(self, apiclient, zoneid, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPC:

    def create(self, apiclient, VPCFactory, cidr, zoneid, displaytext, name, vpcofferingid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def restart(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnGateway:

    def create(self, apiclient, VpnGatewayFactory, vpcid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class TrafficTypeImplementors:

    def list(self, apiclient, **kwargs):
        pass

class VpnConnection:

    def reset(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, VpnConnectionFactory, s2scustomergatewayid, s2svpngatewayid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class CustomCertificate:

    def upload(self, apiclient, domainsuffix, certificate, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScaleVmProfile:

    def create(self, apiclient, AutoScaleVmProfileFactory, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class SnapshotPolicies:

    def list(self, apiclient, volumeid, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class FromLoadBalancerRule:

    def remove(self, apiclient, id, virtualmachineids, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScaleVmProfile:

    def create(self, apiclient, AutoScaleVmProfileFactory, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class SnapshotPolicies:

    def list(self, apiclient, volumeid, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class FromLoadBalancerRule:

    def remove(self, apiclient, id, virtualmachineids, **kwargs):
        pass

class FirewallRule:

    def create(self, apiclient, FirewallRuleFactory, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountToProject:

    def add(self, apiclient, projectid, **kwargs):
        pass

class SecondaryStorage:

    def add(self, apiclient, url, **kwargs):
        pass

class PortForwardingRule:

    def create(self, apiclient, PortForwardingRuleFactory, publicport, virtualmachineid, protocol, ipaddressid, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, publicport, protocol, ipaddressid, privateport, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class ServiceOffering:

    def create(self, apiclient, ServiceOfferingFactory, displaytext, memory, cpunumber, name, cpuspeed, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capacity:

    def list(self, apiclient, **kwargs):
        pass

class S3:

    def add(self, apiclient, secretkey, accesskey, bucket, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class Alerts:

    def list(self, apiclient, **kwargs):
        pass

class ServiceForRouter:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class SecurityGroup:

    def create(self, apiclient, SecurityGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class TrafficType:

    def add(self, apiclient, traffictype, physicalnetworkid, **kwargs):
        pass

    def list(self, apiclient, physicalnetworkid, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class EventTypes:

    def list(self, apiclient):
        pass

class Config:

    def ldap(self, apiclient, queryfilter, hostname, searchbase, **kwargs):
        pass

class Events:

    def list(self, apiclient, **kwargs):
        pass

class Network:

    def create(self, apiclient, NetworkFactory, displaytext, name, networkofferingid, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def restart(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Tags:

    def create(self, apiclient, TagsFactory, resourcetype, resourceids, tags, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, resourcetype, resourceids, **kwargs):
        pass

class SecurityGroupIngress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class CloudIdentifier:

    def get(self, apiclient, userid, **kwargs):
        pass

class User:

    def enable(self, apiclient, id, **kwargs):
        pass

    def get(self, apiclient, userapikey, **kwargs):
        pass

    def lock(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, UserFactory, username, account, firstname, lastname, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Condition:

    def create(self, apiclient, ConditionFactory, threshold, relationaloperator, counterid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UserKeys:

    def register(self, apiclient, id, **kwargs):
        pass

class PrivateGateway:

    def create(self, apiclient, PrivateGatewayFactory, netmask, vlan, ipaddress, gateway, vpcid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Domain:

    def create(self, apiclient, DomainFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class OsTypes:

    def list(self, apiclient, **kwargs):
        pass

class Snapshot:

    def create(self, apiclient, SnapshotFactory, volumeid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Router:

    def destroy(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

class IsoPermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicy:

    def create(self, apiclient, LBStickinessPolicyFactory, lbruleid, methodname, name, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class InstanceGroup:

    def create(self, apiclient, InstanceGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Cluster:

    def add(self, apiclient, clustername, hypervisor, zoneid, clustertype, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountFromProject:

    def delete(self, apiclient, projectid, account, **kwargs):
        pass

class Apis:

    def list(self, apiclient, **kwargs):
        pass

class TrafficMonitor:

    def add(self, apiclient, url, zoneid, **kwargs):
        pass

    def list(self, apiclient, zoneid, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capabilities:

    def list(self, apiclient):
        pass

class NiciraNvpDevice:

    def add(self, apiclient, username, physicalnetworkid, password, hostname, transportzoneuuid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, nvpdeviceid, **kwargs):
        pass

class SnapshotPolicy:

    def create(self, apiclient, SnapshotPolicyFactory, timezone, maxsnaps, schedule, volumeid, intervaltype, **kwargs):
        pass

class IpAddress:

    def disassociate(self, apiclient, id, **kwargs):
        pass

    def associate(self, apiclient, **kwargs):
        pass

class ResourceLimit:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, resourcetype, **kwargs):
        pass

class DefaultZoneForAccount:

    def mark(self, apiclient, account, domainid, zoneid, **kwargs):
        pass

class Volume:

    def migrate(self, apiclient, storageid, volumeid, **kwargs):
        pass

    def create(self, apiclient, VolumeFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def upload(self, apiclient, url, zoneid, name, format, **kwargs):
        pass

    def attach(self, apiclient, id, virtualmachineid, **kwargs):
        pass

    def detach(self, apiclient, **kwargs):
        pass

    def extract(self, apiclient, zoneid, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPC:

    def create(self, apiclient, VPCFactory, cidr, zoneid, displaytext, name, vpcofferingid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def restart(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnGateway:

    def create(self, apiclient, VpnGatewayFactory, vpcid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class TrafficTypeImplementors:

    def list(self, apiclient, **kwargs):
        pass

class VpnConnection:

    def reset(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, VpnConnectionFactory, s2scustomergatewayid, s2svpngatewayid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class CustomCertificate:

    def upload(self, apiclient, domainsuffix, certificate, **kwargs):
        pass

class UsageRecords:

    def list(self, apiclient, startdate, enddate, **kwargs):
        pass

    def generate(self, apiclient, startdate, enddate, **kwargs):
        pass

class StaticNat:

    def enable(self, apiclient, ipaddressid, virtualmachineid, **kwargs):
        pass

    def disable(self, apiclient, ipaddressid, **kwargs):
        pass

class VlanIpRange:

    def create(self, apiclient, VlanIpRangeFactory, startip, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScaleVmProfile:

    def create(self, apiclient, AutoScaleVmProfileFactory, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScaleVmProfile:

    def create(self, apiclient, AutoScaleVmProfileFactory, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class SnapshotPolicies:

    def list(self, apiclient, volumeid, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class FromLoadBalancerRule:

    def remove(self, apiclient, id, virtualmachineids, **kwargs):
        pass

class FirewallRule:

    def create(self, apiclient, FirewallRuleFactory, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountToProject:

    def add(self, apiclient, projectid, **kwargs):
        pass

class SecondaryStorage:

    def add(self, apiclient, url, **kwargs):
        pass

class PortForwardingRule:

    def create(self, apiclient, PortForwardingRuleFactory, publicport, virtualmachineid, protocol, ipaddressid, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, publicport, protocol, ipaddressid, privateport, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class ServiceOffering:

    def create(self, apiclient, ServiceOfferingFactory, displaytext, memory, cpunumber, name, cpuspeed, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capacity:

    def list(self, apiclient, **kwargs):
        pass

class S3:

    def add(self, apiclient, secretkey, accesskey, bucket, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class Alerts:

    def list(self, apiclient, **kwargs):
        pass

class ServiceForRouter:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class SecurityGroup:

    def create(self, apiclient, SecurityGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class TrafficType:

    def add(self, apiclient, traffictype, physicalnetworkid, **kwargs):
        pass

    def list(self, apiclient, physicalnetworkid, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class EventTypes:

    def list(self, apiclient):
        pass

class Config:

    def ldap(self, apiclient, queryfilter, hostname, searchbase, **kwargs):
        pass

class Events:

    def list(self, apiclient, **kwargs):
        pass

class Network:

    def create(self, apiclient, NetworkFactory, displaytext, name, networkofferingid, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def restart(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Tags:

    def create(self, apiclient, TagsFactory, resourcetype, resourceids, tags, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, resourcetype, resourceids, **kwargs):
        pass

class SecurityGroupIngress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class CloudIdentifier:

    def get(self, apiclient, userid, **kwargs):
        pass

class User:

    def enable(self, apiclient, id, **kwargs):
        pass

    def get(self, apiclient, userapikey, **kwargs):
        pass

    def lock(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, UserFactory, username, account, firstname, lastname, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Condition:

    def create(self, apiclient, ConditionFactory, threshold, relationaloperator, counterid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UserKeys:

    def register(self, apiclient, id, **kwargs):
        pass

class PrivateGateway:

    def create(self, apiclient, PrivateGatewayFactory, netmask, vlan, ipaddress, gateway, vpcid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Domain:

    def create(self, apiclient, DomainFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class OsTypes:

    def list(self, apiclient, **kwargs):
        pass

class Snapshot:

    def create(self, apiclient, SnapshotFactory, volumeid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Router:

    def destroy(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

class IsoPermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicy:

    def create(self, apiclient, LBStickinessPolicyFactory, lbruleid, methodname, name, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class InstanceGroup:

    def create(self, apiclient, InstanceGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Cluster:

    def add(self, apiclient, clustername, hypervisor, zoneid, clustertype, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountFromProject:

    def delete(self, apiclient, projectid, account, **kwargs):
        pass

class Apis:

    def list(self, apiclient, **kwargs):
        pass

class TrafficMonitor:

    def add(self, apiclient, url, zoneid, **kwargs):
        pass

    def list(self, apiclient, zoneid, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capabilities:

    def list(self, apiclient):
        pass

class NiciraNvpDevice:

    def add(self, apiclient, username, physicalnetworkid, password, hostname, transportzoneuuid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, nvpdeviceid, **kwargs):
        pass

class SnapshotPolicy:

    def create(self, apiclient, SnapshotPolicyFactory, timezone, maxsnaps, schedule, volumeid, intervaltype, **kwargs):
        pass

class IpAddress:

    def disassociate(self, apiclient, id, **kwargs):
        pass

    def associate(self, apiclient, **kwargs):
        pass

class ResourceLimit:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, resourcetype, **kwargs):
        pass

class DefaultZoneForAccount:

    def mark(self, apiclient, account, domainid, zoneid, **kwargs):
        pass

class Volume:

    def migrate(self, apiclient, storageid, volumeid, **kwargs):
        pass

    def create(self, apiclient, VolumeFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def upload(self, apiclient, url, zoneid, name, format, **kwargs):
        pass

    def attach(self, apiclient, id, virtualmachineid, **kwargs):
        pass

    def detach(self, apiclient, **kwargs):
        pass

    def extract(self, apiclient, zoneid, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPC:

    def create(self, apiclient, VPCFactory, cidr, zoneid, displaytext, name, vpcofferingid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def restart(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnGateway:

    def create(self, apiclient, VpnGatewayFactory, vpcid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class TrafficTypeImplementors:

    def list(self, apiclient, **kwargs):
        pass

class VpnConnection:

    def reset(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, VpnConnectionFactory, s2scustomergatewayid, s2svpngatewayid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class CustomCertificate:

    def upload(self, apiclient, domainsuffix, certificate, **kwargs):
        pass

class UsageRecords:

    def list(self, apiclient, startdate, enddate, **kwargs):
        pass

    def generate(self, apiclient, startdate, enddate, **kwargs):
        pass

class StaticNat:

    def enable(self, apiclient, ipaddressid, virtualmachineid, **kwargs):
        pass

    def disable(self, apiclient, ipaddressid, **kwargs):
        pass

class VlanIpRange:

    def create(self, apiclient, VlanIpRangeFactory, startip, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScalePolicy:

    def create(self, apiclient, AutoScalePolicyFactory, action, duration, conditionids, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobs:

    def list(self, apiclient, **kwargs):
        pass

class Remove:

    def ldap(self, apiclient):
        pass

class Iso:

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def register(self, apiclient, url, displaytext, name, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def attach(self, apiclient, id, virtualmachineid, **kwargs):
        pass

    def detach(self, apiclient, virtualmachineid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnUser:

    def add(self, apiclient, username, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def remove(self, apiclient, username, **kwargs):
        pass

class SSHKeyPair:

    def create(self, apiclient, SSHKeyPairFactory, name, **kwargs):
        pass

    def register(self, apiclient, publickey, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, name, **kwargs):
        pass

class PhysicalNetwork:

    def create(self, apiclient, PhysicalNetworkFactory, name, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScaleVmProfile:

    def create(self, apiclient, AutoScaleVmProfileFactory, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class SnapshotPolicies:

    def list(self, apiclient, volumeid, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class FromLoadBalancerRule:

    def remove(self, apiclient, id, virtualmachineids, **kwargs):
        pass

class FirewallRule:

    def create(self, apiclient, FirewallRuleFactory, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountToProject:

    def add(self, apiclient, projectid, **kwargs):
        pass

class SecondaryStorage:

    def add(self, apiclient, url, **kwargs):
        pass

class PortForwardingRule:

    def create(self, apiclient, PortForwardingRuleFactory, publicport, virtualmachineid, protocol, ipaddressid, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, publicport, protocol, ipaddressid, privateport, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class ServiceOffering:

    def create(self, apiclient, ServiceOfferingFactory, displaytext, memory, cpunumber, name, cpuspeed, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capacity:

    def list(self, apiclient, **kwargs):
        pass

class S3:

    def add(self, apiclient, secretkey, accesskey, bucket, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class Alerts:

    def list(self, apiclient, **kwargs):
        pass

class ServiceForRouter:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class SecurityGroup:

    def create(self, apiclient, SecurityGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class TrafficType:

    def add(self, apiclient, traffictype, physicalnetworkid, **kwargs):
        pass

    def list(self, apiclient, physicalnetworkid, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class EventTypes:

    def list(self, apiclient):
        pass

class Config:

    def ldap(self, apiclient, queryfilter, hostname, searchbase, **kwargs):
        pass

class Events:

    def list(self, apiclient, **kwargs):
        pass

class Network:

    def create(self, apiclient, NetworkFactory, displaytext, name, networkofferingid, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def restart(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Tags:

    def create(self, apiclient, TagsFactory, resourcetype, resourceids, tags, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, resourcetype, resourceids, **kwargs):
        pass

class SecurityGroupIngress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class CloudIdentifier:

    def get(self, apiclient, userid, **kwargs):
        pass

class User:

    def enable(self, apiclient, id, **kwargs):
        pass

    def get(self, apiclient, userapikey, **kwargs):
        pass

    def lock(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, UserFactory, username, account, firstname, lastname, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Condition:

    def create(self, apiclient, ConditionFactory, threshold, relationaloperator, counterid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UserKeys:

    def register(self, apiclient, id, **kwargs):
        pass

class PrivateGateway:

    def create(self, apiclient, PrivateGatewayFactory, netmask, vlan, ipaddress, gateway, vpcid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Domain:

    def create(self, apiclient, DomainFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class OsTypes:

    def list(self, apiclient, **kwargs):
        pass

class Snapshot:

    def create(self, apiclient, SnapshotFactory, volumeid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Router:

    def destroy(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

class IsoPermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicy:

    def create(self, apiclient, LBStickinessPolicyFactory, lbruleid, methodname, name, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class InstanceGroup:

    def create(self, apiclient, InstanceGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Cluster:

    def add(self, apiclient, clustername, hypervisor, zoneid, clustertype, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountFromProject:

    def delete(self, apiclient, projectid, account, **kwargs):
        pass

class Apis:

    def list(self, apiclient, **kwargs):
        pass

class TrafficMonitor:

    def add(self, apiclient, url, zoneid, **kwargs):
        pass

    def list(self, apiclient, zoneid, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capabilities:

    def list(self, apiclient):
        pass

class NiciraNvpDevice:

    def add(self, apiclient, username, physicalnetworkid, password, hostname, transportzoneuuid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, nvpdeviceid, **kwargs):
        pass

class SnapshotPolicy:

    def create(self, apiclient, SnapshotPolicyFactory, timezone, maxsnaps, schedule, volumeid, intervaltype, **kwargs):
        pass

class IpAddress:

    def disassociate(self, apiclient, id, **kwargs):
        pass

    def associate(self, apiclient, **kwargs):
        pass

class ResourceLimit:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, resourcetype, **kwargs):
        pass

class DefaultZoneForAccount:

    def mark(self, apiclient, account, domainid, zoneid, **kwargs):
        pass

class Volume:

    def migrate(self, apiclient, storageid, volumeid, **kwargs):
        pass

    def create(self, apiclient, VolumeFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def upload(self, apiclient, url, zoneid, name, format, **kwargs):
        pass

    def attach(self, apiclient, id, virtualmachineid, **kwargs):
        pass

    def detach(self, apiclient, **kwargs):
        pass

    def extract(self, apiclient, zoneid, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPC:

    def create(self, apiclient, VPCFactory, cidr, zoneid, displaytext, name, vpcofferingid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def restart(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnGateway:

    def create(self, apiclient, VpnGatewayFactory, vpcid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class TrafficTypeImplementors:

    def list(self, apiclient, **kwargs):
        pass

class VpnConnection:

    def reset(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, VpnConnectionFactory, s2scustomergatewayid, s2svpngatewayid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScaleVmProfile:

    def create(self, apiclient, AutoScaleVmProfileFactory, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class SnapshotPolicies:

    def list(self, apiclient, volumeid, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class FromLoadBalancerRule:

    def remove(self, apiclient, id, virtualmachineids, **kwargs):
        pass

class FirewallRule:

    def create(self, apiclient, FirewallRuleFactory, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountToProject:

    def add(self, apiclient, projectid, **kwargs):
        pass

class SecondaryStorage:

    def add(self, apiclient, url, **kwargs):
        pass

class PortForwardingRule:

    def create(self, apiclient, PortForwardingRuleFactory, publicport, virtualmachineid, protocol, ipaddressid, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, publicport, protocol, ipaddressid, privateport, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class ServiceOffering:

    def create(self, apiclient, ServiceOfferingFactory, displaytext, memory, cpunumber, name, cpuspeed, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capacity:

    def list(self, apiclient, **kwargs):
        pass

class S3:

    def add(self, apiclient, secretkey, accesskey, bucket, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class Alerts:

    def list(self, apiclient, **kwargs):
        pass

class ServiceForRouter:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class SecurityGroup:

    def create(self, apiclient, SecurityGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class TrafficType:

    def add(self, apiclient, traffictype, physicalnetworkid, **kwargs):
        pass

    def list(self, apiclient, physicalnetworkid, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class EventTypes:

    def list(self, apiclient):
        pass

class Config:

    def ldap(self, apiclient, queryfilter, hostname, searchbase, **kwargs):
        pass

class Events:

    def list(self, apiclient, **kwargs):
        pass

class Network:

    def create(self, apiclient, NetworkFactory, displaytext, name, networkofferingid, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def restart(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Tags:

    def create(self, apiclient, TagsFactory, resourcetype, resourceids, tags, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, resourcetype, resourceids, **kwargs):
        pass

class SecurityGroupIngress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class CloudIdentifier:

    def get(self, apiclient, userid, **kwargs):
        pass

class User:

    def enable(self, apiclient, id, **kwargs):
        pass

    def get(self, apiclient, userapikey, **kwargs):
        pass

    def lock(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, UserFactory, username, account, firstname, lastname, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Condition:

    def create(self, apiclient, ConditionFactory, threshold, relationaloperator, counterid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UserKeys:

    def register(self, apiclient, id, **kwargs):
        pass

class PrivateGateway:

    def create(self, apiclient, PrivateGatewayFactory, netmask, vlan, ipaddress, gateway, vpcid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Domain:

    def create(self, apiclient, DomainFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class OsTypes:

    def list(self, apiclient, **kwargs):
        pass

class Snapshot:

    def create(self, apiclient, SnapshotFactory, volumeid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Router:

    def destroy(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

class IsoPermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicy:

    def create(self, apiclient, LBStickinessPolicyFactory, lbruleid, methodname, name, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class InstanceGroup:

    def create(self, apiclient, InstanceGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Cluster:

    def add(self, apiclient, clustername, hypervisor, zoneid, clustertype, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountFromProject:

    def delete(self, apiclient, projectid, account, **kwargs):
        pass

class Apis:

    def list(self, apiclient, **kwargs):
        pass

class TrafficMonitor:

    def add(self, apiclient, url, zoneid, **kwargs):
        pass

    def list(self, apiclient, zoneid, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capabilities:

    def list(self, apiclient):
        pass

class NiciraNvpDevice:

    def add(self, apiclient, username, physicalnetworkid, password, hostname, transportzoneuuid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, nvpdeviceid, **kwargs):
        pass

class SnapshotPolicy:

    def create(self, apiclient, SnapshotPolicyFactory, timezone, maxsnaps, schedule, volumeid, intervaltype, **kwargs):
        pass

class IpAddress:

    def disassociate(self, apiclient, id, **kwargs):
        pass

    def associate(self, apiclient, **kwargs):
        pass

class ResourceLimit:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, resourcetype, **kwargs):
        pass

class DefaultZoneForAccount:

    def mark(self, apiclient, account, domainid, zoneid, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScaleVmProfile:

    def create(self, apiclient, AutoScaleVmProfileFactory, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class SnapshotPolicies:

    def list(self, apiclient, volumeid, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class FromLoadBalancerRule:

    def remove(self, apiclient, id, virtualmachineids, **kwargs):
        pass

class FirewallRule:

    def create(self, apiclient, FirewallRuleFactory, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountToProject:

    def add(self, apiclient, projectid, **kwargs):
        pass

class SecondaryStorage:

    def add(self, apiclient, url, **kwargs):
        pass

class PortForwardingRule:

    def create(self, apiclient, PortForwardingRuleFactory, publicport, virtualmachineid, protocol, ipaddressid, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, publicport, protocol, ipaddressid, privateport, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class ServiceOffering:

    def create(self, apiclient, ServiceOfferingFactory, displaytext, memory, cpunumber, name, cpuspeed, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capacity:

    def list(self, apiclient, **kwargs):
        pass

class S3:

    def add(self, apiclient, secretkey, accesskey, bucket, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class Alerts:

    def list(self, apiclient, **kwargs):
        pass

class ServiceForRouter:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class SecurityGroup:

    def create(self, apiclient, SecurityGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class TrafficType:

    def add(self, apiclient, traffictype, physicalnetworkid, **kwargs):
        pass

    def list(self, apiclient, physicalnetworkid, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class EventTypes:

    def list(self, apiclient):
        pass

class Config:

    def ldap(self, apiclient, queryfilter, hostname, searchbase, **kwargs):
        pass

class Events:

    def list(self, apiclient, **kwargs):
        pass

class Network:

    def create(self, apiclient, NetworkFactory, displaytext, name, networkofferingid, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def restart(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Tags:

    def create(self, apiclient, TagsFactory, resourcetype, resourceids, tags, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, resourcetype, resourceids, **kwargs):
        pass

class SecurityGroupIngress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class CloudIdentifier:

    def get(self, apiclient, userid, **kwargs):
        pass

class User:

    def enable(self, apiclient, id, **kwargs):
        pass

    def get(self, apiclient, userapikey, **kwargs):
        pass

    def lock(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, UserFactory, username, account, firstname, lastname, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Condition:

    def create(self, apiclient, ConditionFactory, threshold, relationaloperator, counterid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UserKeys:

    def register(self, apiclient, id, **kwargs):
        pass

class PrivateGateway:

    def create(self, apiclient, PrivateGatewayFactory, netmask, vlan, ipaddress, gateway, vpcid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Domain:

    def create(self, apiclient, DomainFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class OsTypes:

    def list(self, apiclient, **kwargs):
        pass

class Snapshot:

    def create(self, apiclient, SnapshotFactory, volumeid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Router:

    def destroy(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

class IsoPermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicy:

    def create(self, apiclient, LBStickinessPolicyFactory, lbruleid, methodname, name, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class InstanceGroup:

    def create(self, apiclient, InstanceGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Cluster:

    def add(self, apiclient, clustername, hypervisor, zoneid, clustertype, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountFromProject:

    def delete(self, apiclient, projectid, account, **kwargs):
        pass

class Apis:

    def list(self, apiclient, **kwargs):
        pass

class TrafficMonitor:

    def add(self, apiclient, url, zoneid, **kwargs):
        pass

    def list(self, apiclient, zoneid, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScaleVmProfile:

    def create(self, apiclient, AutoScaleVmProfileFactory, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class SnapshotPolicies:

    def list(self, apiclient, volumeid, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class FromLoadBalancerRule:

    def remove(self, apiclient, id, virtualmachineids, **kwargs):
        pass

class FirewallRule:

    def create(self, apiclient, FirewallRuleFactory, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountToProject:

    def add(self, apiclient, projectid, **kwargs):
        pass

class SecondaryStorage:

    def add(self, apiclient, url, **kwargs):
        pass

class PortForwardingRule:

    def create(self, apiclient, PortForwardingRuleFactory, publicport, virtualmachineid, protocol, ipaddressid, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, publicport, protocol, ipaddressid, privateport, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class ServiceOffering:

    def create(self, apiclient, ServiceOfferingFactory, displaytext, memory, cpunumber, name, cpuspeed, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capacity:

    def list(self, apiclient, **kwargs):
        pass

class S3:

    def add(self, apiclient, secretkey, accesskey, bucket, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class Alerts:

    def list(self, apiclient, **kwargs):
        pass

class ServiceForRouter:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class SecurityGroup:

    def create(self, apiclient, SecurityGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class TrafficType:

    def add(self, apiclient, traffictype, physicalnetworkid, **kwargs):
        pass

    def list(self, apiclient, physicalnetworkid, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class EventTypes:

    def list(self, apiclient):
        pass

class Config:

    def ldap(self, apiclient, queryfilter, hostname, searchbase, **kwargs):
        pass

class Events:

    def list(self, apiclient, **kwargs):
        pass

class Network:

    def create(self, apiclient, NetworkFactory, displaytext, name, networkofferingid, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def restart(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Tags:

    def create(self, apiclient, TagsFactory, resourcetype, resourceids, tags, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, resourcetype, resourceids, **kwargs):
        pass

class SecurityGroupIngress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class CloudIdentifier:

    def get(self, apiclient, userid, **kwargs):
        pass

class User:

    def enable(self, apiclient, id, **kwargs):
        pass

    def get(self, apiclient, userapikey, **kwargs):
        pass

    def lock(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, UserFactory, username, account, firstname, lastname, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Condition:

    def create(self, apiclient, ConditionFactory, threshold, relationaloperator, counterid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UserKeys:

    def register(self, apiclient, id, **kwargs):
        pass

class PrivateGateway:

    def create(self, apiclient, PrivateGatewayFactory, netmask, vlan, ipaddress, gateway, vpcid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Domain:

    def create(self, apiclient, DomainFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class OsTypes:

    def list(self, apiclient, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScaleVmProfile:

    def create(self, apiclient, AutoScaleVmProfileFactory, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class SnapshotPolicies:

    def list(self, apiclient, volumeid, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class FromLoadBalancerRule:

    def remove(self, apiclient, id, virtualmachineids, **kwargs):
        pass

class FirewallRule:

    def create(self, apiclient, FirewallRuleFactory, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountToProject:

    def add(self, apiclient, projectid, **kwargs):
        pass

class SecondaryStorage:

    def add(self, apiclient, url, **kwargs):
        pass

class PortForwardingRule:

    def create(self, apiclient, PortForwardingRuleFactory, publicport, virtualmachineid, protocol, ipaddressid, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, publicport, protocol, ipaddressid, privateport, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class ServiceOffering:

    def create(self, apiclient, ServiceOfferingFactory, displaytext, memory, cpunumber, name, cpuspeed, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capacity:

    def list(self, apiclient, **kwargs):
        pass

class S3:

    def add(self, apiclient, secretkey, accesskey, bucket, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class Alerts:

    def list(self, apiclient, **kwargs):
        pass

class ServiceForRouter:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class SecurityGroup:

    def create(self, apiclient, SecurityGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class TrafficType:

    def add(self, apiclient, traffictype, physicalnetworkid, **kwargs):
        pass

    def list(self, apiclient, physicalnetworkid, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class EventTypes:

    def list(self, apiclient):
        pass

class Config:

    def ldap(self, apiclient, queryfilter, hostname, searchbase, **kwargs):
        pass

class Events:

    def list(self, apiclient, **kwargs):
        pass

class Network:

    def create(self, apiclient, NetworkFactory, displaytext, name, networkofferingid, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def restart(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Tags:

    def create(self, apiclient, TagsFactory, resourcetype, resourceids, tags, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, resourcetype, resourceids, **kwargs):
        pass

class SecurityGroupIngress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class CloudIdentifier:

    def get(self, apiclient, userid, **kwargs):
        pass

class User:

    def enable(self, apiclient, id, **kwargs):
        pass

    def get(self, apiclient, userapikey, **kwargs):
        pass

    def lock(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, UserFactory, username, account, firstname, lastname, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Condition:

    def create(self, apiclient, ConditionFactory, threshold, relationaloperator, counterid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UserKeys:

    def register(self, apiclient, id, **kwargs):
        pass

class PrivateGateway:

    def create(self, apiclient, PrivateGatewayFactory, netmask, vlan, ipaddress, gateway, vpcid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Domain:

    def create(self, apiclient, DomainFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class OsTypes:

    def list(self, apiclient, **kwargs):
        pass

class Snapshot:

    def create(self, apiclient, SnapshotFactory, volumeid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Router:

    def destroy(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

class IsoPermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicy:

    def create(self, apiclient, LBStickinessPolicyFactory, lbruleid, methodname, name, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class InstanceGroup:

    def create(self, apiclient, InstanceGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Cluster:

    def add(self, apiclient, clustername, hypervisor, zoneid, clustertype, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountFromProject:

    def delete(self, apiclient, projectid, account, **kwargs):
        pass

class Apis:

    def list(self, apiclient, **kwargs):
        pass

class TrafficMonitor:

    def add(self, apiclient, url, zoneid, **kwargs):
        pass

    def list(self, apiclient, zoneid, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capabilities:

    def list(self, apiclient):
        pass

class NiciraNvpDevice:

    def add(self, apiclient, username, physicalnetworkid, password, hostname, transportzoneuuid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, nvpdeviceid, **kwargs):
        pass

class SnapshotPolicy:

    def create(self, apiclient, SnapshotPolicyFactory, timezone, maxsnaps, schedule, volumeid, intervaltype, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScaleVmProfile:

    def create(self, apiclient, AutoScaleVmProfileFactory, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class SnapshotPolicies:

    def list(self, apiclient, volumeid, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class FromLoadBalancerRule:

    def remove(self, apiclient, id, virtualmachineids, **kwargs):
        pass

class FirewallRule:

    def create(self, apiclient, FirewallRuleFactory, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScaleVmProfile:

    def create(self, apiclient, AutoScaleVmProfileFactory, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class SnapshotPolicies:

    def list(self, apiclient, volumeid, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class FromLoadBalancerRule:

    def remove(self, apiclient, id, virtualmachineids, **kwargs):
        pass

class FirewallRule:

    def create(self, apiclient, FirewallRuleFactory, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountToProject:

    def add(self, apiclient, projectid, **kwargs):
        pass

class SecondaryStorage:

    def add(self, apiclient, url, **kwargs):
        pass

class PortForwardingRule:

    def create(self, apiclient, PortForwardingRuleFactory, publicport, virtualmachineid, protocol, ipaddressid, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, publicport, protocol, ipaddressid, privateport, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class ServiceOffering:

    def create(self, apiclient, ServiceOfferingFactory, displaytext, memory, cpunumber, name, cpuspeed, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capacity:

    def list(self, apiclient, **kwargs):
        pass

class S3:

    def add(self, apiclient, secretkey, accesskey, bucket, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class Alerts:

    def list(self, apiclient, **kwargs):
        pass

class ServiceForRouter:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class SecurityGroup:

    def create(self, apiclient, SecurityGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class TrafficType:

    def add(self, apiclient, traffictype, physicalnetworkid, **kwargs):
        pass

    def list(self, apiclient, physicalnetworkid, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class EventTypes:

    def list(self, apiclient):
        pass

class Config:

    def ldap(self, apiclient, queryfilter, hostname, searchbase, **kwargs):
        pass

class Events:

    def list(self, apiclient, **kwargs):
        pass

class Network:

    def create(self, apiclient, NetworkFactory, displaytext, name, networkofferingid, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def restart(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Tags:

    def create(self, apiclient, TagsFactory, resourcetype, resourceids, tags, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, resourcetype, resourceids, **kwargs):
        pass

class SecurityGroupIngress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class CloudIdentifier:

    def get(self, apiclient, userid, **kwargs):
        pass

class User:

    def enable(self, apiclient, id, **kwargs):
        pass

    def get(self, apiclient, userapikey, **kwargs):
        pass

    def lock(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, UserFactory, username, account, firstname, lastname, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Condition:

    def create(self, apiclient, ConditionFactory, threshold, relationaloperator, counterid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UserKeys:

    def register(self, apiclient, id, **kwargs):
        pass

class PrivateGateway:

    def create(self, apiclient, PrivateGatewayFactory, netmask, vlan, ipaddress, gateway, vpcid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Domain:

    def create(self, apiclient, DomainFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class OsTypes:

    def list(self, apiclient, **kwargs):
        pass

class Snapshot:

    def create(self, apiclient, SnapshotFactory, volumeid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Router:

    def destroy(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

class IsoPermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicy:

    def create(self, apiclient, LBStickinessPolicyFactory, lbruleid, methodname, name, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class InstanceGroup:

    def create(self, apiclient, InstanceGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Cluster:

    def add(self, apiclient, clustername, hypervisor, zoneid, clustertype, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountFromProject:

    def delete(self, apiclient, projectid, account, **kwargs):
        pass

class Apis:

    def list(self, apiclient, **kwargs):
        pass

class TrafficMonitor:

    def add(self, apiclient, url, zoneid, **kwargs):
        pass

    def list(self, apiclient, zoneid, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capabilities:

    def list(self, apiclient):
        pass

class NiciraNvpDevice:

    def add(self, apiclient, username, physicalnetworkid, password, hostname, transportzoneuuid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, nvpdeviceid, **kwargs):
        pass

class SnapshotPolicy:

    def create(self, apiclient, SnapshotPolicyFactory, timezone, maxsnaps, schedule, volumeid, intervaltype, **kwargs):
        pass

class IpAddress:

    def disassociate(self, apiclient, id, **kwargs):
        pass

    def associate(self, apiclient, **kwargs):
        pass

class ResourceLimit:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, resourcetype, **kwargs):
        pass

class DefaultZoneForAccount:

    def mark(self, apiclient, account, domainid, zoneid, **kwargs):
        pass

class Volume:

    def migrate(self, apiclient, storageid, volumeid, **kwargs):
        pass

    def create(self, apiclient, VolumeFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def upload(self, apiclient, url, zoneid, name, format, **kwargs):
        pass

    def attach(self, apiclient, id, virtualmachineid, **kwargs):
        pass

    def detach(self, apiclient, **kwargs):
        pass

    def extract(self, apiclient, zoneid, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPC:

    def create(self, apiclient, VPCFactory, cidr, zoneid, displaytext, name, vpcofferingid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def restart(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnGateway:

    def create(self, apiclient, VpnGatewayFactory, vpcid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class TrafficTypeImplementors:

    def list(self, apiclient, **kwargs):
        pass

class VpnConnection:

    def reset(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, VpnConnectionFactory, s2scustomergatewayid, s2svpngatewayid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class CustomCertificate:

    def upload(self, apiclient, domainsuffix, certificate, **kwargs):
        pass

class UsageRecords:

    def list(self, apiclient, startdate, enddate, **kwargs):
        pass

    def generate(self, apiclient, startdate, enddate, **kwargs):
        pass

class StaticNat:

    def enable(self, apiclient, ipaddressid, virtualmachineid, **kwargs):
        pass

    def disable(self, apiclient, ipaddressid, **kwargs):
        pass

class VlanIpRange:

    def create(self, apiclient, VlanIpRangeFactory, startip, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScalePolicy:

    def create(self, apiclient, AutoScalePolicyFactory, action, duration, conditionids, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobs:

    def list(self, apiclient, **kwargs):
        pass

class Remove:

    def ldap(self, apiclient):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScaleVmProfile:

    def create(self, apiclient, AutoScaleVmProfileFactory, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class SnapshotPolicies:

    def list(self, apiclient, volumeid, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class FromLoadBalancerRule:

    def remove(self, apiclient, id, virtualmachineids, **kwargs):
        pass

class FirewallRule:

    def create(self, apiclient, FirewallRuleFactory, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountToProject:

    def add(self, apiclient, projectid, **kwargs):
        pass

class SecondaryStorage:

    def add(self, apiclient, url, **kwargs):
        pass

class PortForwardingRule:

    def create(self, apiclient, PortForwardingRuleFactory, publicport, virtualmachineid, protocol, ipaddressid, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, publicport, protocol, ipaddressid, privateport, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class ServiceOffering:

    def create(self, apiclient, ServiceOfferingFactory, displaytext, memory, cpunumber, name, cpuspeed, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capacity:

    def list(self, apiclient, **kwargs):
        pass

class S3:

    def add(self, apiclient, secretkey, accesskey, bucket, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class Alerts:

    def list(self, apiclient, **kwargs):
        pass

class ServiceForRouter:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class SecurityGroup:

    def create(self, apiclient, SecurityGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class TrafficType:

    def add(self, apiclient, traffictype, physicalnetworkid, **kwargs):
        pass

    def list(self, apiclient, physicalnetworkid, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class EventTypes:

    def list(self, apiclient):
        pass

class Config:

    def ldap(self, apiclient, queryfilter, hostname, searchbase, **kwargs):
        pass

class Events:

    def list(self, apiclient, **kwargs):
        pass

class Network:

    def create(self, apiclient, NetworkFactory, displaytext, name, networkofferingid, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def restart(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Tags:

    def create(self, apiclient, TagsFactory, resourcetype, resourceids, tags, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, resourcetype, resourceids, **kwargs):
        pass

class SecurityGroupIngress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class CloudIdentifier:

    def get(self, apiclient, userid, **kwargs):
        pass

class User:

    def enable(self, apiclient, id, **kwargs):
        pass

    def get(self, apiclient, userapikey, **kwargs):
        pass

    def lock(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, UserFactory, username, account, firstname, lastname, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Condition:

    def create(self, apiclient, ConditionFactory, threshold, relationaloperator, counterid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UserKeys:

    def register(self, apiclient, id, **kwargs):
        pass

class PrivateGateway:

    def create(self, apiclient, PrivateGatewayFactory, netmask, vlan, ipaddress, gateway, vpcid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Domain:

    def create(self, apiclient, DomainFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class OsTypes:

    def list(self, apiclient, **kwargs):
        pass

class Snapshot:

    def create(self, apiclient, SnapshotFactory, volumeid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Router:

    def destroy(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

class IsoPermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicy:

    def create(self, apiclient, LBStickinessPolicyFactory, lbruleid, methodname, name, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class InstanceGroup:

    def create(self, apiclient, InstanceGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Cluster:

    def add(self, apiclient, clustername, hypervisor, zoneid, clustertype, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountFromProject:

    def delete(self, apiclient, projectid, account, **kwargs):
        pass

class Apis:

    def list(self, apiclient, **kwargs):
        pass

class TrafficMonitor:

    def add(self, apiclient, url, zoneid, **kwargs):
        pass

    def list(self, apiclient, zoneid, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capabilities:

    def list(self, apiclient):
        pass

class NiciraNvpDevice:

    def add(self, apiclient, username, physicalnetworkid, password, hostname, transportzoneuuid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, nvpdeviceid, **kwargs):
        pass

class SnapshotPolicy:

    def create(self, apiclient, SnapshotPolicyFactory, timezone, maxsnaps, schedule, volumeid, intervaltype, **kwargs):
        pass

class IpAddress:

    def disassociate(self, apiclient, id, **kwargs):
        pass

    def associate(self, apiclient, **kwargs):
        pass

class ResourceLimit:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, resourcetype, **kwargs):
        pass

class DefaultZoneForAccount:

    def mark(self, apiclient, account, domainid, zoneid, **kwargs):
        pass

class Volume:

    def migrate(self, apiclient, storageid, volumeid, **kwargs):
        pass

    def create(self, apiclient, VolumeFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def upload(self, apiclient, url, zoneid, name, format, **kwargs):
        pass

    def attach(self, apiclient, id, virtualmachineid, **kwargs):
        pass

    def detach(self, apiclient, **kwargs):
        pass

    def extract(self, apiclient, zoneid, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPC:

    def create(self, apiclient, VPCFactory, cidr, zoneid, displaytext, name, vpcofferingid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def restart(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnGateway:

    def create(self, apiclient, VpnGatewayFactory, vpcid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class TrafficTypeImplementors:

    def list(self, apiclient, **kwargs):
        pass

class VpnConnection:

    def reset(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, VpnConnectionFactory, s2scustomergatewayid, s2svpngatewayid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class CustomCertificate:

    def upload(self, apiclient, domainsuffix, certificate, **kwargs):
        pass

class UsageRecords:

    def list(self, apiclient, startdate, enddate, **kwargs):
        pass

    def generate(self, apiclient, startdate, enddate, **kwargs):
        pass

class StaticNat:

    def enable(self, apiclient, ipaddressid, virtualmachineid, **kwargs):
        pass

    def disable(self, apiclient, ipaddressid, **kwargs):
        pass

class VlanIpRange:

    def create(self, apiclient, VlanIpRangeFactory, startip, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScalePolicy:

    def create(self, apiclient, AutoScalePolicyFactory, action, duration, conditionids, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobs:

    def list(self, apiclient, **kwargs):
        pass

class Remove:

    def ldap(self, apiclient):
        pass

class Iso:

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def register(self, apiclient, url, displaytext, name, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def attach(self, apiclient, id, virtualmachineid, **kwargs):
        pass

    def detach(self, apiclient, virtualmachineid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnUser:

    def add(self, apiclient, username, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def remove(self, apiclient, username, **kwargs):
        pass

class SSHKeyPair:

    def create(self, apiclient, SSHKeyPairFactory, name, **kwargs):
        pass

    def register(self, apiclient, publickey, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, name, **kwargs):
        pass

class PhysicalNetwork:

    def create(self, apiclient, PhysicalNetworkFactory, name, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class IpForwardingRule:

    def create(self, apiclient, IpForwardingRuleFactory, startport, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class ProjectInvitation:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, projectid, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Hypervisors:

    def list(self, apiclient, **kwargs):
        pass

class ToLoadBalancerRule:

    def assign(self, apiclient, id, virtualmachineids, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScaleVmProfile:

    def create(self, apiclient, AutoScaleVmProfileFactory, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class SnapshotPolicies:

    def list(self, apiclient, volumeid, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class FromLoadBalancerRule:

    def remove(self, apiclient, id, virtualmachineids, **kwargs):
        pass

class FirewallRule:

    def create(self, apiclient, FirewallRuleFactory, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountToProject:

    def add(self, apiclient, projectid, **kwargs):
        pass

class SecondaryStorage:

    def add(self, apiclient, url, **kwargs):
        pass

class PortForwardingRule:

    def create(self, apiclient, PortForwardingRuleFactory, publicport, virtualmachineid, protocol, ipaddressid, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, publicport, protocol, ipaddressid, privateport, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class ServiceOffering:

    def create(self, apiclient, ServiceOfferingFactory, displaytext, memory, cpunumber, name, cpuspeed, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capacity:

    def list(self, apiclient, **kwargs):
        pass

class S3:

    def add(self, apiclient, secretkey, accesskey, bucket, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class Alerts:

    def list(self, apiclient, **kwargs):
        pass

class ServiceForRouter:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class SecurityGroup:

    def create(self, apiclient, SecurityGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class TrafficType:

    def add(self, apiclient, traffictype, physicalnetworkid, **kwargs):
        pass

    def list(self, apiclient, physicalnetworkid, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class EventTypes:

    def list(self, apiclient):
        pass

class Config:

    def ldap(self, apiclient, queryfilter, hostname, searchbase, **kwargs):
        pass

class Events:

    def list(self, apiclient, **kwargs):
        pass

class Network:

    def create(self, apiclient, NetworkFactory, displaytext, name, networkofferingid, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def restart(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Tags:

    def create(self, apiclient, TagsFactory, resourcetype, resourceids, tags, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, resourcetype, resourceids, **kwargs):
        pass

class SecurityGroupIngress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class CloudIdentifier:

    def get(self, apiclient, userid, **kwargs):
        pass

class User:

    def enable(self, apiclient, id, **kwargs):
        pass

    def get(self, apiclient, userapikey, **kwargs):
        pass

    def lock(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, UserFactory, username, account, firstname, lastname, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Condition:

    def create(self, apiclient, ConditionFactory, threshold, relationaloperator, counterid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UserKeys:

    def register(self, apiclient, id, **kwargs):
        pass

class PrivateGateway:

    def create(self, apiclient, PrivateGatewayFactory, netmask, vlan, ipaddress, gateway, vpcid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Domain:

    def create(self, apiclient, DomainFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class OsTypes:

    def list(self, apiclient, **kwargs):
        pass

class Snapshot:

    def create(self, apiclient, SnapshotFactory, volumeid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Router:

    def destroy(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

class IsoPermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicy:

    def create(self, apiclient, LBStickinessPolicyFactory, lbruleid, methodname, name, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class InstanceGroup:

    def create(self, apiclient, InstanceGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Cluster:

    def add(self, apiclient, clustername, hypervisor, zoneid, clustertype, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScaleVmProfile:

    def create(self, apiclient, AutoScaleVmProfileFactory, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class SnapshotPolicies:

    def list(self, apiclient, volumeid, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class FromLoadBalancerRule:

    def remove(self, apiclient, id, virtualmachineids, **kwargs):
        pass

class FirewallRule:

    def create(self, apiclient, FirewallRuleFactory, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountToProject:

    def add(self, apiclient, projectid, **kwargs):
        pass

class SecondaryStorage:

    def add(self, apiclient, url, **kwargs):
        pass

class PortForwardingRule:

    def create(self, apiclient, PortForwardingRuleFactory, publicport, virtualmachineid, protocol, ipaddressid, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, publicport, protocol, ipaddressid, privateport, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class ServiceOffering:

    def create(self, apiclient, ServiceOfferingFactory, displaytext, memory, cpunumber, name, cpuspeed, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capacity:

    def list(self, apiclient, **kwargs):
        pass

class S3:

    def add(self, apiclient, secretkey, accesskey, bucket, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class Alerts:

    def list(self, apiclient, **kwargs):
        pass

class ServiceForRouter:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class SecurityGroup:

    def create(self, apiclient, SecurityGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class TrafficType:

    def add(self, apiclient, traffictype, physicalnetworkid, **kwargs):
        pass

    def list(self, apiclient, physicalnetworkid, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class EventTypes:

    def list(self, apiclient):
        pass

class Config:

    def ldap(self, apiclient, queryfilter, hostname, searchbase, **kwargs):
        pass

class Events:

    def list(self, apiclient, **kwargs):
        pass

class Network:

    def create(self, apiclient, NetworkFactory, displaytext, name, networkofferingid, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def restart(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Tags:

    def create(self, apiclient, TagsFactory, resourcetype, resourceids, tags, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, resourcetype, resourceids, **kwargs):
        pass

class SecurityGroupIngress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class CloudIdentifier:

    def get(self, apiclient, userid, **kwargs):
        pass

class User:

    def enable(self, apiclient, id, **kwargs):
        pass

    def get(self, apiclient, userapikey, **kwargs):
        pass

    def lock(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, UserFactory, username, account, firstname, lastname, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Condition:

    def create(self, apiclient, ConditionFactory, threshold, relationaloperator, counterid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UserKeys:

    def register(self, apiclient, id, **kwargs):
        pass

class PrivateGateway:

    def create(self, apiclient, PrivateGatewayFactory, netmask, vlan, ipaddress, gateway, vpcid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Domain:

    def create(self, apiclient, DomainFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class OsTypes:

    def list(self, apiclient, **kwargs):
        pass

class Snapshot:

    def create(self, apiclient, SnapshotFactory, volumeid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Router:

    def destroy(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

class IsoPermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicy:

    def create(self, apiclient, LBStickinessPolicyFactory, lbruleid, methodname, name, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class InstanceGroup:

    def create(self, apiclient, InstanceGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Cluster:

    def add(self, apiclient, clustername, hypervisor, zoneid, clustertype, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountFromProject:

    def delete(self, apiclient, projectid, account, **kwargs):
        pass

class Apis:

    def list(self, apiclient, **kwargs):
        pass

class TrafficMonitor:

    def add(self, apiclient, url, zoneid, **kwargs):
        pass

    def list(self, apiclient, zoneid, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capabilities:

    def list(self, apiclient):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScaleVmProfile:

    def create(self, apiclient, AutoScaleVmProfileFactory, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class SnapshotPolicies:

    def list(self, apiclient, volumeid, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class FromLoadBalancerRule:

    def remove(self, apiclient, id, virtualmachineids, **kwargs):
        pass

class FirewallRule:

    def create(self, apiclient, FirewallRuleFactory, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountToProject:

    def add(self, apiclient, projectid, **kwargs):
        pass

class SecondaryStorage:

    def add(self, apiclient, url, **kwargs):
        pass

class PortForwardingRule:

    def create(self, apiclient, PortForwardingRuleFactory, publicport, virtualmachineid, protocol, ipaddressid, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, publicport, protocol, ipaddressid, privateport, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class ServiceOffering:

    def create(self, apiclient, ServiceOfferingFactory, displaytext, memory, cpunumber, name, cpuspeed, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capacity:

    def list(self, apiclient, **kwargs):
        pass

class S3:

    def add(self, apiclient, secretkey, accesskey, bucket, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class Alerts:

    def list(self, apiclient, **kwargs):
        pass

class ServiceForRouter:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class SecurityGroup:

    def create(self, apiclient, SecurityGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class TrafficType:

    def add(self, apiclient, traffictype, physicalnetworkid, **kwargs):
        pass

    def list(self, apiclient, physicalnetworkid, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class EventTypes:

    def list(self, apiclient):
        pass

class Config:

    def ldap(self, apiclient, queryfilter, hostname, searchbase, **kwargs):
        pass

class Events:

    def list(self, apiclient, **kwargs):
        pass

class Network:

    def create(self, apiclient, NetworkFactory, displaytext, name, networkofferingid, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def restart(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Tags:

    def create(self, apiclient, TagsFactory, resourcetype, resourceids, tags, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, resourcetype, resourceids, **kwargs):
        pass

class SecurityGroupIngress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class CloudIdentifier:

    def get(self, apiclient, userid, **kwargs):
        pass

class User:

    def enable(self, apiclient, id, **kwargs):
        pass

    def get(self, apiclient, userapikey, **kwargs):
        pass

    def lock(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, UserFactory, username, account, firstname, lastname, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Condition:

    def create(self, apiclient, ConditionFactory, threshold, relationaloperator, counterid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UserKeys:

    def register(self, apiclient, id, **kwargs):
        pass

class PrivateGateway:

    def create(self, apiclient, PrivateGatewayFactory, netmask, vlan, ipaddress, gateway, vpcid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Domain:

    def create(self, apiclient, DomainFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class OsTypes:

    def list(self, apiclient, **kwargs):
        pass

class Snapshot:

    def create(self, apiclient, SnapshotFactory, volumeid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Router:

    def destroy(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

class IsoPermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicy:

    def create(self, apiclient, LBStickinessPolicyFactory, lbruleid, methodname, name, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class InstanceGroup:

    def create(self, apiclient, InstanceGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Cluster:

    def add(self, apiclient, clustername, hypervisor, zoneid, clustertype, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountFromProject:

    def delete(self, apiclient, projectid, account, **kwargs):
        pass

class Apis:

    def list(self, apiclient, **kwargs):
        pass

class TrafficMonitor:

    def add(self, apiclient, url, zoneid, **kwargs):
        pass

    def list(self, apiclient, zoneid, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capabilities:

    def list(self, apiclient):
        pass

class NiciraNvpDevice:

    def add(self, apiclient, username, physicalnetworkid, password, hostname, transportzoneuuid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, nvpdeviceid, **kwargs):
        pass

class SnapshotPolicy:

    def create(self, apiclient, SnapshotPolicyFactory, timezone, maxsnaps, schedule, volumeid, intervaltype, **kwargs):
        pass

class IpAddress:

    def disassociate(self, apiclient, id, **kwargs):
        pass

    def associate(self, apiclient, **kwargs):
        pass

class ResourceLimit:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, resourcetype, **kwargs):
        pass

class DefaultZoneForAccount:

    def mark(self, apiclient, account, domainid, zoneid, **kwargs):
        pass

class Volume:

    def migrate(self, apiclient, storageid, volumeid, **kwargs):
        pass

    def create(self, apiclient, VolumeFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def upload(self, apiclient, url, zoneid, name, format, **kwargs):
        pass

    def attach(self, apiclient, id, virtualmachineid, **kwargs):
        pass

    def detach(self, apiclient, **kwargs):
        pass

    def extract(self, apiclient, zoneid, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPC:

    def create(self, apiclient, VPCFactory, cidr, zoneid, displaytext, name, vpcofferingid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def restart(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnGateway:

    def create(self, apiclient, VpnGatewayFactory, vpcid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class TrafficTypeImplementors:

    def list(self, apiclient, **kwargs):
        pass

class VpnConnection:

    def reset(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, VpnConnectionFactory, s2scustomergatewayid, s2svpngatewayid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class CustomCertificate:

    def upload(self, apiclient, domainsuffix, certificate, **kwargs):
        pass

class UsageRecords:

    def list(self, apiclient, startdate, enddate, **kwargs):
        pass

    def generate(self, apiclient, startdate, enddate, **kwargs):
        pass

class StaticNat:

    def enable(self, apiclient, ipaddressid, virtualmachineid, **kwargs):
        pass

    def disable(self, apiclient, ipaddressid, **kwargs):
        pass

class VlanIpRange:

    def create(self, apiclient, VlanIpRangeFactory, startip, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScalePolicy:

    def create(self, apiclient, AutoScalePolicyFactory, action, duration, conditionids, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobs:

    def list(self, apiclient, **kwargs):
        pass

class Remove:

    def ldap(self, apiclient):
        pass

class Iso:

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def register(self, apiclient, url, displaytext, name, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def attach(self, apiclient, id, virtualmachineid, **kwargs):
        pass

    def detach(self, apiclient, virtualmachineid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnUser:

    def add(self, apiclient, username, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def remove(self, apiclient, username, **kwargs):
        pass

class SSHKeyPair:

    def create(self, apiclient, SSHKeyPairFactory, name, **kwargs):
        pass

    def register(self, apiclient, publickey, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, name, **kwargs):
        pass

class PhysicalNetwork:

    def create(self, apiclient, PhysicalNetworkFactory, name, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class IpForwardingRule:

    def create(self, apiclient, IpForwardingRuleFactory, startport, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class ProjectInvitation:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, projectid, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Hypervisors:

    def list(self, apiclient, **kwargs):
        pass

class ToLoadBalancerRule:

    def assign(self, apiclient, id, virtualmachineids, **kwargs):
        pass

class DomainChildren:

    def list(self, apiclient, **kwargs):
        pass

class Pod:

    def create(self, apiclient, PodFactory, startip, netmask, zoneid, gateway, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class ServiceForSystemVm:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScaleVmProfile:

    def create(self, apiclient, AutoScaleVmProfileFactory, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class SnapshotPolicies:

    def list(self, apiclient, volumeid, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class FromLoadBalancerRule:

    def remove(self, apiclient, id, virtualmachineids, **kwargs):
        pass

class FirewallRule:

    def create(self, apiclient, FirewallRuleFactory, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountToProject:

    def add(self, apiclient, projectid, **kwargs):
        pass

class SecondaryStorage:

    def add(self, apiclient, url, **kwargs):
        pass

class PortForwardingRule:

    def create(self, apiclient, PortForwardingRuleFactory, publicport, virtualmachineid, protocol, ipaddressid, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, publicport, protocol, ipaddressid, privateport, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class ServiceOffering:

    def create(self, apiclient, ServiceOfferingFactory, displaytext, memory, cpunumber, name, cpuspeed, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capacity:

    def list(self, apiclient, **kwargs):
        pass

class S3:

    def add(self, apiclient, secretkey, accesskey, bucket, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class Alerts:

    def list(self, apiclient, **kwargs):
        pass

class ServiceForRouter:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class SecurityGroup:

    def create(self, apiclient, SecurityGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class TrafficType:

    def add(self, apiclient, traffictype, physicalnetworkid, **kwargs):
        pass

    def list(self, apiclient, physicalnetworkid, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class EventTypes:

    def list(self, apiclient):
        pass

class Config:

    def ldap(self, apiclient, queryfilter, hostname, searchbase, **kwargs):
        pass

class Events:

    def list(self, apiclient, **kwargs):
        pass

class Network:

    def create(self, apiclient, NetworkFactory, displaytext, name, networkofferingid, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def restart(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Tags:

    def create(self, apiclient, TagsFactory, resourcetype, resourceids, tags, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, resourcetype, resourceids, **kwargs):
        pass

class SecurityGroupIngress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class CloudIdentifier:

    def get(self, apiclient, userid, **kwargs):
        pass

class User:

    def enable(self, apiclient, id, **kwargs):
        pass

    def get(self, apiclient, userapikey, **kwargs):
        pass

    def lock(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, UserFactory, username, account, firstname, lastname, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Condition:

    def create(self, apiclient, ConditionFactory, threshold, relationaloperator, counterid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UserKeys:

    def register(self, apiclient, id, **kwargs):
        pass

class PrivateGateway:

    def create(self, apiclient, PrivateGatewayFactory, netmask, vlan, ipaddress, gateway, vpcid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Domain:

    def create(self, apiclient, DomainFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class OsTypes:

    def list(self, apiclient, **kwargs):
        pass

class Snapshot:

    def create(self, apiclient, SnapshotFactory, volumeid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Router:

    def destroy(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

class IsoPermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScaleVmProfile:

    def create(self, apiclient, AutoScaleVmProfileFactory, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class SnapshotPolicies:

    def list(self, apiclient, volumeid, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class FromLoadBalancerRule:

    def remove(self, apiclient, id, virtualmachineids, **kwargs):
        pass

class FirewallRule:

    def create(self, apiclient, FirewallRuleFactory, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountToProject:

    def add(self, apiclient, projectid, **kwargs):
        pass

class SecondaryStorage:

    def add(self, apiclient, url, **kwargs):
        pass

class PortForwardingRule:

    def create(self, apiclient, PortForwardingRuleFactory, publicport, virtualmachineid, protocol, ipaddressid, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, publicport, protocol, ipaddressid, privateport, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class ServiceOffering:

    def create(self, apiclient, ServiceOfferingFactory, displaytext, memory, cpunumber, name, cpuspeed, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capacity:

    def list(self, apiclient, **kwargs):
        pass

class S3:

    def add(self, apiclient, secretkey, accesskey, bucket, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class Alerts:

    def list(self, apiclient, **kwargs):
        pass

class ServiceForRouter:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class SecurityGroup:

    def create(self, apiclient, SecurityGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class TrafficType:

    def add(self, apiclient, traffictype, physicalnetworkid, **kwargs):
        pass

    def list(self, apiclient, physicalnetworkid, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class EventTypes:

    def list(self, apiclient):
        pass

class Config:

    def ldap(self, apiclient, queryfilter, hostname, searchbase, **kwargs):
        pass

class Events:

    def list(self, apiclient, **kwargs):
        pass

class Network:

    def create(self, apiclient, NetworkFactory, displaytext, name, networkofferingid, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def restart(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Tags:

    def create(self, apiclient, TagsFactory, resourcetype, resourceids, tags, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, resourcetype, resourceids, **kwargs):
        pass

class SecurityGroupIngress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class CloudIdentifier:

    def get(self, apiclient, userid, **kwargs):
        pass

class User:

    def enable(self, apiclient, id, **kwargs):
        pass

    def get(self, apiclient, userapikey, **kwargs):
        pass

    def lock(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, UserFactory, username, account, firstname, lastname, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Condition:

    def create(self, apiclient, ConditionFactory, threshold, relationaloperator, counterid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UserKeys:

    def register(self, apiclient, id, **kwargs):
        pass

class PrivateGateway:

    def create(self, apiclient, PrivateGatewayFactory, netmask, vlan, ipaddress, gateway, vpcid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Domain:

    def create(self, apiclient, DomainFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class OsTypes:

    def list(self, apiclient, **kwargs):
        pass

class Snapshot:

    def create(self, apiclient, SnapshotFactory, volumeid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Router:

    def destroy(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

class IsoPermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicy:

    def create(self, apiclient, LBStickinessPolicyFactory, lbruleid, methodname, name, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class InstanceGroup:

    def create(self, apiclient, InstanceGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Cluster:

    def add(self, apiclient, clustername, hypervisor, zoneid, clustertype, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountFromProject:

    def delete(self, apiclient, projectid, account, **kwargs):
        pass

class Apis:

    def list(self, apiclient, **kwargs):
        pass

class TrafficMonitor:

    def add(self, apiclient, url, zoneid, **kwargs):
        pass

    def list(self, apiclient, zoneid, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capabilities:

    def list(self, apiclient):
        pass

class NiciraNvpDevice:

    def add(self, apiclient, username, physicalnetworkid, password, hostname, transportzoneuuid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, nvpdeviceid, **kwargs):
        pass

class SnapshotPolicy:

    def create(self, apiclient, SnapshotPolicyFactory, timezone, maxsnaps, schedule, volumeid, intervaltype, **kwargs):
        pass

class IpAddress:

    def disassociate(self, apiclient, id, **kwargs):
        pass

    def associate(self, apiclient, **kwargs):
        pass

class ResourceLimit:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, resourcetype, **kwargs):
        pass

class DefaultZoneForAccount:

    def mark(self, apiclient, account, domainid, zoneid, **kwargs):
        pass

class Volume:

    def migrate(self, apiclient, storageid, volumeid, **kwargs):
        pass

    def create(self, apiclient, VolumeFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def upload(self, apiclient, url, zoneid, name, format, **kwargs):
        pass

    def attach(self, apiclient, id, virtualmachineid, **kwargs):
        pass

    def detach(self, apiclient, **kwargs):
        pass

    def extract(self, apiclient, zoneid, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPC:

    def create(self, apiclient, VPCFactory, cidr, zoneid, displaytext, name, vpcofferingid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def restart(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnGateway:

    def create(self, apiclient, VpnGatewayFactory, vpcid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class TrafficTypeImplementors:

    def list(self, apiclient, **kwargs):
        pass

class VpnConnection:

    def reset(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, VpnConnectionFactory, s2scustomergatewayid, s2svpngatewayid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class CustomCertificate:

    def upload(self, apiclient, domainsuffix, certificate, **kwargs):
        pass

class UsageRecords:

    def list(self, apiclient, startdate, enddate, **kwargs):
        pass

    def generate(self, apiclient, startdate, enddate, **kwargs):
        pass

class StaticNat:

    def enable(self, apiclient, ipaddressid, virtualmachineid, **kwargs):
        pass

    def disable(self, apiclient, ipaddressid, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScaleVmProfile:

    def create(self, apiclient, AutoScaleVmProfileFactory, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class SnapshotPolicies:

    def list(self, apiclient, volumeid, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class FromLoadBalancerRule:

    def remove(self, apiclient, id, virtualmachineids, **kwargs):
        pass

class FirewallRule:

    def create(self, apiclient, FirewallRuleFactory, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountToProject:

    def add(self, apiclient, projectid, **kwargs):
        pass

class SecondaryStorage:

    def add(self, apiclient, url, **kwargs):
        pass

class PortForwardingRule:

    def create(self, apiclient, PortForwardingRuleFactory, publicport, virtualmachineid, protocol, ipaddressid, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, publicport, protocol, ipaddressid, privateport, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class ServiceOffering:

    def create(self, apiclient, ServiceOfferingFactory, displaytext, memory, cpunumber, name, cpuspeed, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capacity:

    def list(self, apiclient, **kwargs):
        pass

class S3:

    def add(self, apiclient, secretkey, accesskey, bucket, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class Alerts:

    def list(self, apiclient, **kwargs):
        pass

class ServiceForRouter:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScaleVmProfile:

    def create(self, apiclient, AutoScaleVmProfileFactory, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class SnapshotPolicies:

    def list(self, apiclient, volumeid, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class FromLoadBalancerRule:

    def remove(self, apiclient, id, virtualmachineids, **kwargs):
        pass

class FirewallRule:

    def create(self, apiclient, FirewallRuleFactory, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountToProject:

    def add(self, apiclient, projectid, **kwargs):
        pass

class SecondaryStorage:

    def add(self, apiclient, url, **kwargs):
        pass

class PortForwardingRule:

    def create(self, apiclient, PortForwardingRuleFactory, publicport, virtualmachineid, protocol, ipaddressid, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, publicport, protocol, ipaddressid, privateport, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class ServiceOffering:

    def create(self, apiclient, ServiceOfferingFactory, displaytext, memory, cpunumber, name, cpuspeed, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capacity:

    def list(self, apiclient, **kwargs):
        pass

class S3:

    def add(self, apiclient, secretkey, accesskey, bucket, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class Alerts:

    def list(self, apiclient, **kwargs):
        pass

class ServiceForRouter:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class SecurityGroup:

    def create(self, apiclient, SecurityGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class TrafficType:

    def add(self, apiclient, traffictype, physicalnetworkid, **kwargs):
        pass

    def list(self, apiclient, physicalnetworkid, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class EventTypes:

    def list(self, apiclient):
        pass

class Config:

    def ldap(self, apiclient, queryfilter, hostname, searchbase, **kwargs):
        pass

class Events:

    def list(self, apiclient, **kwargs):
        pass

class Network:

    def create(self, apiclient, NetworkFactory, displaytext, name, networkofferingid, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def restart(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Tags:

    def create(self, apiclient, TagsFactory, resourcetype, resourceids, tags, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, resourcetype, resourceids, **kwargs):
        pass

class SecurityGroupIngress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class CloudIdentifier:

    def get(self, apiclient, userid, **kwargs):
        pass

class User:

    def enable(self, apiclient, id, **kwargs):
        pass

    def get(self, apiclient, userapikey, **kwargs):
        pass

    def lock(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, UserFactory, username, account, firstname, lastname, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Condition:

    def create(self, apiclient, ConditionFactory, threshold, relationaloperator, counterid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScaleVmProfile:

    def create(self, apiclient, AutoScaleVmProfileFactory, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class SnapshotPolicies:

    def list(self, apiclient, volumeid, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class FromLoadBalancerRule:

    def remove(self, apiclient, id, virtualmachineids, **kwargs):
        pass

class FirewallRule:

    def create(self, apiclient, FirewallRuleFactory, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountToProject:

    def add(self, apiclient, projectid, **kwargs):
        pass

class SecondaryStorage:

    def add(self, apiclient, url, **kwargs):
        pass

class PortForwardingRule:

    def create(self, apiclient, PortForwardingRuleFactory, publicport, virtualmachineid, protocol, ipaddressid, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, publicport, protocol, ipaddressid, privateport, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class ServiceOffering:

    def create(self, apiclient, ServiceOfferingFactory, displaytext, memory, cpunumber, name, cpuspeed, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capacity:

    def list(self, apiclient, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScaleVmProfile:

    def create(self, apiclient, AutoScaleVmProfileFactory, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class SnapshotPolicies:

    def list(self, apiclient, volumeid, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class FromLoadBalancerRule:

    def remove(self, apiclient, id, virtualmachineids, **kwargs):
        pass

class FirewallRule:

    def create(self, apiclient, FirewallRuleFactory, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountToProject:

    def add(self, apiclient, projectid, **kwargs):
        pass

class SecondaryStorage:

    def add(self, apiclient, url, **kwargs):
        pass

class PortForwardingRule:

    def create(self, apiclient, PortForwardingRuleFactory, publicport, virtualmachineid, protocol, ipaddressid, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, publicport, protocol, ipaddressid, privateport, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class ServiceOffering:

    def create(self, apiclient, ServiceOfferingFactory, displaytext, memory, cpunumber, name, cpuspeed, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capacity:

    def list(self, apiclient, **kwargs):
        pass

class S3:

    def add(self, apiclient, secretkey, accesskey, bucket, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class Alerts:

    def list(self, apiclient, **kwargs):
        pass

class ServiceForRouter:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class SecurityGroup:

    def create(self, apiclient, SecurityGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class TrafficType:

    def add(self, apiclient, traffictype, physicalnetworkid, **kwargs):
        pass

    def list(self, apiclient, physicalnetworkid, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class EventTypes:

    def list(self, apiclient):
        pass

class Config:

    def ldap(self, apiclient, queryfilter, hostname, searchbase, **kwargs):
        pass

class Events:

    def list(self, apiclient, **kwargs):
        pass

class Network:

    def create(self, apiclient, NetworkFactory, displaytext, name, networkofferingid, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def restart(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Tags:

    def create(self, apiclient, TagsFactory, resourcetype, resourceids, tags, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, resourcetype, resourceids, **kwargs):
        pass

class SecurityGroupIngress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class CloudIdentifier:

    def get(self, apiclient, userid, **kwargs):
        pass

class User:

    def enable(self, apiclient, id, **kwargs):
        pass

    def get(self, apiclient, userapikey, **kwargs):
        pass

    def lock(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, UserFactory, username, account, firstname, lastname, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Condition:

    def create(self, apiclient, ConditionFactory, threshold, relationaloperator, counterid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UserKeys:

    def register(self, apiclient, id, **kwargs):
        pass

class PrivateGateway:

    def create(self, apiclient, PrivateGatewayFactory, netmask, vlan, ipaddress, gateway, vpcid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Domain:

    def create(self, apiclient, DomainFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScaleVmProfile:

    def create(self, apiclient, AutoScaleVmProfileFactory, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class SnapshotPolicies:

    def list(self, apiclient, volumeid, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class FromLoadBalancerRule:

    def remove(self, apiclient, id, virtualmachineids, **kwargs):
        pass

class FirewallRule:

    def create(self, apiclient, FirewallRuleFactory, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountToProject:

    def add(self, apiclient, projectid, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScaleVmProfile:

    def create(self, apiclient, AutoScaleVmProfileFactory, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class SnapshotPolicies:

    def list(self, apiclient, volumeid, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class FromLoadBalancerRule:

    def remove(self, apiclient, id, virtualmachineids, **kwargs):
        pass

class FirewallRule:

    def create(self, apiclient, FirewallRuleFactory, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountToProject:

    def add(self, apiclient, projectid, **kwargs):
        pass

class SecondaryStorage:

    def add(self, apiclient, url, **kwargs):
        pass

class PortForwardingRule:

    def create(self, apiclient, PortForwardingRuleFactory, publicport, virtualmachineid, protocol, ipaddressid, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, publicport, protocol, ipaddressid, privateport, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class ServiceOffering:

    def create(self, apiclient, ServiceOfferingFactory, displaytext, memory, cpunumber, name, cpuspeed, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capacity:

    def list(self, apiclient, **kwargs):
        pass

class S3:

    def add(self, apiclient, secretkey, accesskey, bucket, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class Alerts:

    def list(self, apiclient, **kwargs):
        pass

class ServiceForRouter:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class SecurityGroup:

    def create(self, apiclient, SecurityGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class TrafficType:

    def add(self, apiclient, traffictype, physicalnetworkid, **kwargs):
        pass

    def list(self, apiclient, physicalnetworkid, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class EventTypes:

    def list(self, apiclient):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScaleVmProfile:

    def create(self, apiclient, AutoScaleVmProfileFactory, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class SnapshotPolicies:

    def list(self, apiclient, volumeid, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class FromLoadBalancerRule:

    def remove(self, apiclient, id, virtualmachineids, **kwargs):
        pass

class FirewallRule:

    def create(self, apiclient, FirewallRuleFactory, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountToProject:

    def add(self, apiclient, projectid, **kwargs):
        pass

class SecondaryStorage:

    def add(self, apiclient, url, **kwargs):
        pass

class PortForwardingRule:

    def create(self, apiclient, PortForwardingRuleFactory, publicport, virtualmachineid, protocol, ipaddressid, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, publicport, protocol, ipaddressid, privateport, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class ServiceOffering:

    def create(self, apiclient, ServiceOfferingFactory, displaytext, memory, cpunumber, name, cpuspeed, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capacity:

    def list(self, apiclient, **kwargs):
        pass

class S3:

    def add(self, apiclient, secretkey, accesskey, bucket, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class Alerts:

    def list(self, apiclient, **kwargs):
        pass

class ServiceForRouter:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class SecurityGroup:

    def create(self, apiclient, SecurityGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class TrafficType:

    def add(self, apiclient, traffictype, physicalnetworkid, **kwargs):
        pass

    def list(self, apiclient, physicalnetworkid, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class EventTypes:

    def list(self, apiclient):
        pass

class Config:

    def ldap(self, apiclient, queryfilter, hostname, searchbase, **kwargs):
        pass

class Events:

    def list(self, apiclient, **kwargs):
        pass

class Network:

    def create(self, apiclient, NetworkFactory, displaytext, name, networkofferingid, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def restart(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Tags:

    def create(self, apiclient, TagsFactory, resourcetype, resourceids, tags, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, resourcetype, resourceids, **kwargs):
        pass

class SecurityGroupIngress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class CloudIdentifier:

    def get(self, apiclient, userid, **kwargs):
        pass

class User:

    def enable(self, apiclient, id, **kwargs):
        pass

    def get(self, apiclient, userapikey, **kwargs):
        pass

    def lock(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, UserFactory, username, account, firstname, lastname, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Condition:

    def create(self, apiclient, ConditionFactory, threshold, relationaloperator, counterid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UserKeys:

    def register(self, apiclient, id, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScaleVmProfile:

    def create(self, apiclient, AutoScaleVmProfileFactory, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class SnapshotPolicies:

    def list(self, apiclient, volumeid, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class FromLoadBalancerRule:

    def remove(self, apiclient, id, virtualmachineids, **kwargs):
        pass

class FirewallRule:

    def create(self, apiclient, FirewallRuleFactory, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountToProject:

    def add(self, apiclient, projectid, **kwargs):
        pass

class SecondaryStorage:

    def add(self, apiclient, url, **kwargs):
        pass

class PortForwardingRule:

    def create(self, apiclient, PortForwardingRuleFactory, publicport, virtualmachineid, protocol, ipaddressid, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, publicport, protocol, ipaddressid, privateport, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class ServiceOffering:

    def create(self, apiclient, ServiceOfferingFactory, displaytext, memory, cpunumber, name, cpuspeed, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capacity:

    def list(self, apiclient, **kwargs):
        pass

class S3:

    def add(self, apiclient, secretkey, accesskey, bucket, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScaleVmProfile:

    def create(self, apiclient, AutoScaleVmProfileFactory, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class SnapshotPolicies:

    def list(self, apiclient, volumeid, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class FromLoadBalancerRule:

    def remove(self, apiclient, id, virtualmachineids, **kwargs):
        pass

class FirewallRule:

    def create(self, apiclient, FirewallRuleFactory, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountToProject:

    def add(self, apiclient, projectid, **kwargs):
        pass

class SecondaryStorage:

    def add(self, apiclient, url, **kwargs):
        pass

class PortForwardingRule:

    def create(self, apiclient, PortForwardingRuleFactory, publicport, virtualmachineid, protocol, ipaddressid, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, publicport, protocol, ipaddressid, privateport, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class ServiceOffering:

    def create(self, apiclient, ServiceOfferingFactory, displaytext, memory, cpunumber, name, cpuspeed, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capacity:

    def list(self, apiclient, **kwargs):
        pass

class S3:

    def add(self, apiclient, secretkey, accesskey, bucket, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class Alerts:

    def list(self, apiclient, **kwargs):
        pass

class ServiceForRouter:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class SecurityGroup:

    def create(self, apiclient, SecurityGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class TrafficType:

    def add(self, apiclient, traffictype, physicalnetworkid, **kwargs):
        pass

    def list(self, apiclient, physicalnetworkid, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class EventTypes:

    def list(self, apiclient):
        pass

class Config:

    def ldap(self, apiclient, queryfilter, hostname, searchbase, **kwargs):
        pass

class Events:

    def list(self, apiclient, **kwargs):
        pass

class Network:

    def create(self, apiclient, NetworkFactory, displaytext, name, networkofferingid, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def restart(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Tags:

    def create(self, apiclient, TagsFactory, resourcetype, resourceids, tags, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, resourcetype, resourceids, **kwargs):
        pass

class SecurityGroupIngress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class CloudIdentifier:

    def get(self, apiclient, userid, **kwargs):
        pass

class User:

    def enable(self, apiclient, id, **kwargs):
        pass

    def get(self, apiclient, userapikey, **kwargs):
        pass

    def lock(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, UserFactory, username, account, firstname, lastname, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Condition:

    def create(self, apiclient, ConditionFactory, threshold, relationaloperator, counterid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UserKeys:

    def register(self, apiclient, id, **kwargs):
        pass

class PrivateGateway:

    def create(self, apiclient, PrivateGatewayFactory, netmask, vlan, ipaddress, gateway, vpcid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Domain:

    def create(self, apiclient, DomainFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class OsTypes:

    def list(self, apiclient, **kwargs):
        pass

class Snapshot:

    def create(self, apiclient, SnapshotFactory, volumeid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Router:

    def destroy(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

class IsoPermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicy:

    def create(self, apiclient, LBStickinessPolicyFactory, lbruleid, methodname, name, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class InstanceGroup:

    def create(self, apiclient, InstanceGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Cluster:

    def add(self, apiclient, clustername, hypervisor, zoneid, clustertype, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountFromProject:

    def delete(self, apiclient, projectid, account, **kwargs):
        pass

class Apis:

    def list(self, apiclient, **kwargs):
        pass

class TrafficMonitor:

    def add(self, apiclient, url, zoneid, **kwargs):
        pass

    def list(self, apiclient, zoneid, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capabilities:

    def list(self, apiclient):
        pass

class NiciraNvpDevice:

    def add(self, apiclient, username, physicalnetworkid, password, hostname, transportzoneuuid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, nvpdeviceid, **kwargs):
        pass

class SnapshotPolicy:

    def create(self, apiclient, SnapshotPolicyFactory, timezone, maxsnaps, schedule, volumeid, intervaltype, **kwargs):
        pass

class IpAddress:

    def disassociate(self, apiclient, id, **kwargs):
        pass

    def associate(self, apiclient, **kwargs):
        pass

class ResourceLimit:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, resourcetype, **kwargs):
        pass

class DefaultZoneForAccount:

    def mark(self, apiclient, account, domainid, zoneid, **kwargs):
        pass

class Volume:

    def migrate(self, apiclient, storageid, volumeid, **kwargs):
        pass

    def create(self, apiclient, VolumeFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def upload(self, apiclient, url, zoneid, name, format, **kwargs):
        pass

    def attach(self, apiclient, id, virtualmachineid, **kwargs):
        pass

    def detach(self, apiclient, **kwargs):
        pass

    def extract(self, apiclient, zoneid, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScaleVmProfile:

    def create(self, apiclient, AutoScaleVmProfileFactory, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class SnapshotPolicies:

    def list(self, apiclient, volumeid, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class FromLoadBalancerRule:

    def remove(self, apiclient, id, virtualmachineids, **kwargs):
        pass

class FirewallRule:

    def create(self, apiclient, FirewallRuleFactory, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountToProject:

    def add(self, apiclient, projectid, **kwargs):
        pass

class SecondaryStorage:

    def add(self, apiclient, url, **kwargs):
        pass

class PortForwardingRule:

    def create(self, apiclient, PortForwardingRuleFactory, publicport, virtualmachineid, protocol, ipaddressid, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, publicport, protocol, ipaddressid, privateport, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class ServiceOffering:

    def create(self, apiclient, ServiceOfferingFactory, displaytext, memory, cpunumber, name, cpuspeed, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capacity:

    def list(self, apiclient, **kwargs):
        pass

class S3:

    def add(self, apiclient, secretkey, accesskey, bucket, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class Alerts:

    def list(self, apiclient, **kwargs):
        pass

class ServiceForRouter:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class SecurityGroup:

    def create(self, apiclient, SecurityGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class TrafficType:

    def add(self, apiclient, traffictype, physicalnetworkid, **kwargs):
        pass

    def list(self, apiclient, physicalnetworkid, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class EventTypes:

    def list(self, apiclient):
        pass

class Config:

    def ldap(self, apiclient, queryfilter, hostname, searchbase, **kwargs):
        pass

class Events:

    def list(self, apiclient, **kwargs):
        pass

class Network:

    def create(self, apiclient, NetworkFactory, displaytext, name, networkofferingid, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def restart(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Tags:

    def create(self, apiclient, TagsFactory, resourcetype, resourceids, tags, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, resourcetype, resourceids, **kwargs):
        pass

class SecurityGroupIngress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class CloudIdentifier:

    def get(self, apiclient, userid, **kwargs):
        pass

class User:

    def enable(self, apiclient, id, **kwargs):
        pass

    def get(self, apiclient, userapikey, **kwargs):
        pass

    def lock(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, UserFactory, username, account, firstname, lastname, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Condition:

    def create(self, apiclient, ConditionFactory, threshold, relationaloperator, counterid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UserKeys:

    def register(self, apiclient, id, **kwargs):
        pass

class PrivateGateway:

    def create(self, apiclient, PrivateGatewayFactory, netmask, vlan, ipaddress, gateway, vpcid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Domain:

    def create(self, apiclient, DomainFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class OsTypes:

    def list(self, apiclient, **kwargs):
        pass

class Snapshot:

    def create(self, apiclient, SnapshotFactory, volumeid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Router:

    def destroy(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

class IsoPermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicy:

    def create(self, apiclient, LBStickinessPolicyFactory, lbruleid, methodname, name, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class InstanceGroup:

    def create(self, apiclient, InstanceGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Cluster:

    def add(self, apiclient, clustername, hypervisor, zoneid, clustertype, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountFromProject:

    def delete(self, apiclient, projectid, account, **kwargs):
        pass

class Apis:

    def list(self, apiclient, **kwargs):
        pass

class TrafficMonitor:

    def add(self, apiclient, url, zoneid, **kwargs):
        pass

    def list(self, apiclient, zoneid, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capabilities:

    def list(self, apiclient):
        pass

class NiciraNvpDevice:

    def add(self, apiclient, username, physicalnetworkid, password, hostname, transportzoneuuid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, nvpdeviceid, **kwargs):
        pass

class SnapshotPolicy:

    def create(self, apiclient, SnapshotPolicyFactory, timezone, maxsnaps, schedule, volumeid, intervaltype, **kwargs):
        pass

class IpAddress:

    def disassociate(self, apiclient, id, **kwargs):
        pass

    def associate(self, apiclient, **kwargs):
        pass

class ResourceLimit:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, resourcetype, **kwargs):
        pass

class DefaultZoneForAccount:

    def mark(self, apiclient, account, domainid, zoneid, **kwargs):
        pass

class Volume:

    def migrate(self, apiclient, storageid, volumeid, **kwargs):
        pass

    def create(self, apiclient, VolumeFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def upload(self, apiclient, url, zoneid, name, format, **kwargs):
        pass

    def attach(self, apiclient, id, virtualmachineid, **kwargs):
        pass

    def detach(self, apiclient, **kwargs):
        pass

    def extract(self, apiclient, zoneid, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPC:

    def create(self, apiclient, VPCFactory, cidr, zoneid, displaytext, name, vpcofferingid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def restart(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnGateway:

    def create(self, apiclient, VpnGatewayFactory, vpcid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class TrafficTypeImplementors:

    def list(self, apiclient, **kwargs):
        pass

class VpnConnection:

    def reset(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, VpnConnectionFactory, s2scustomergatewayid, s2svpngatewayid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class CustomCertificate:

    def upload(self, apiclient, domainsuffix, certificate, **kwargs):
        pass

class UsageRecords:

    def list(self, apiclient, startdate, enddate, **kwargs):
        pass

    def generate(self, apiclient, startdate, enddate, **kwargs):
        pass

class StaticNat:

    def enable(self, apiclient, ipaddressid, virtualmachineid, **kwargs):
        pass

    def disable(self, apiclient, ipaddressid, **kwargs):
        pass

class VlanIpRange:

    def create(self, apiclient, VlanIpRangeFactory, startip, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScalePolicy:

    def create(self, apiclient, AutoScalePolicyFactory, action, duration, conditionids, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobs:

    def list(self, apiclient, **kwargs):
        pass

class Remove:

    def ldap(self, apiclient):
        pass

class Iso:

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def register(self, apiclient, url, displaytext, name, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def attach(self, apiclient, id, virtualmachineid, **kwargs):
        pass

    def detach(self, apiclient, virtualmachineid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnUser:

    def add(self, apiclient, username, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def remove(self, apiclient, username, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScaleVmProfile:

    def create(self, apiclient, AutoScaleVmProfileFactory, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class SnapshotPolicies:

    def list(self, apiclient, volumeid, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class FromLoadBalancerRule:

    def remove(self, apiclient, id, virtualmachineids, **kwargs):
        pass

class FirewallRule:

    def create(self, apiclient, FirewallRuleFactory, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountToProject:

    def add(self, apiclient, projectid, **kwargs):
        pass

class SecondaryStorage:

    def add(self, apiclient, url, **kwargs):
        pass

class PortForwardingRule:

    def create(self, apiclient, PortForwardingRuleFactory, publicport, virtualmachineid, protocol, ipaddressid, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, publicport, protocol, ipaddressid, privateport, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class ServiceOffering:

    def create(self, apiclient, ServiceOfferingFactory, displaytext, memory, cpunumber, name, cpuspeed, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capacity:

    def list(self, apiclient, **kwargs):
        pass

class S3:

    def add(self, apiclient, secretkey, accesskey, bucket, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class Alerts:

    def list(self, apiclient, **kwargs):
        pass

class ServiceForRouter:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class SecurityGroup:

    def create(self, apiclient, SecurityGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class TrafficType:

    def add(self, apiclient, traffictype, physicalnetworkid, **kwargs):
        pass

    def list(self, apiclient, physicalnetworkid, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class EventTypes:

    def list(self, apiclient):
        pass

class Config:

    def ldap(self, apiclient, queryfilter, hostname, searchbase, **kwargs):
        pass

class Events:

    def list(self, apiclient, **kwargs):
        pass

class Network:

    def create(self, apiclient, NetworkFactory, displaytext, name, networkofferingid, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def restart(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Tags:

    def create(self, apiclient, TagsFactory, resourcetype, resourceids, tags, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, resourcetype, resourceids, **kwargs):
        pass

class SecurityGroupIngress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class CloudIdentifier:

    def get(self, apiclient, userid, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScaleVmProfile:

    def create(self, apiclient, AutoScaleVmProfileFactory, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class SnapshotPolicies:

    def list(self, apiclient, volumeid, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class FromLoadBalancerRule:

    def remove(self, apiclient, id, virtualmachineids, **kwargs):
        pass

class FirewallRule:

    def create(self, apiclient, FirewallRuleFactory, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountToProject:

    def add(self, apiclient, projectid, **kwargs):
        pass

class SecondaryStorage:

    def add(self, apiclient, url, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScaleVmProfile:

    def create(self, apiclient, AutoScaleVmProfileFactory, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class SnapshotPolicies:

    def list(self, apiclient, volumeid, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class FromLoadBalancerRule:

    def remove(self, apiclient, id, virtualmachineids, **kwargs):
        pass

class FirewallRule:

    def create(self, apiclient, FirewallRuleFactory, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountToProject:

    def add(self, apiclient, projectid, **kwargs):
        pass

class SecondaryStorage:

    def add(self, apiclient, url, **kwargs):
        pass

class PortForwardingRule:

    def create(self, apiclient, PortForwardingRuleFactory, publicport, virtualmachineid, protocol, ipaddressid, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, publicport, protocol, ipaddressid, privateport, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class ServiceOffering:

    def create(self, apiclient, ServiceOfferingFactory, displaytext, memory, cpunumber, name, cpuspeed, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capacity:

    def list(self, apiclient, **kwargs):
        pass

class S3:

    def add(self, apiclient, secretkey, accesskey, bucket, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class Alerts:

    def list(self, apiclient, **kwargs):
        pass

class ServiceForRouter:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class SecurityGroup:

    def create(self, apiclient, SecurityGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class TrafficType:

    def add(self, apiclient, traffictype, physicalnetworkid, **kwargs):
        pass

    def list(self, apiclient, physicalnetworkid, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class EventTypes:

    def list(self, apiclient):
        pass

class Config:

    def ldap(self, apiclient, queryfilter, hostname, searchbase, **kwargs):
        pass

class Events:

    def list(self, apiclient, **kwargs):
        pass

class Network:

    def create(self, apiclient, NetworkFactory, displaytext, name, networkofferingid, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def restart(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Tags:

    def create(self, apiclient, TagsFactory, resourcetype, resourceids, tags, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, resourcetype, resourceids, **kwargs):
        pass

class SecurityGroupIngress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class CloudIdentifier:

    def get(self, apiclient, userid, **kwargs):
        pass

class User:

    def enable(self, apiclient, id, **kwargs):
        pass

    def get(self, apiclient, userapikey, **kwargs):
        pass

    def lock(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, UserFactory, username, account, firstname, lastname, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Condition:

    def create(self, apiclient, ConditionFactory, threshold, relationaloperator, counterid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UserKeys:

    def register(self, apiclient, id, **kwargs):
        pass

class PrivateGateway:

    def create(self, apiclient, PrivateGatewayFactory, netmask, vlan, ipaddress, gateway, vpcid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Domain:

    def create(self, apiclient, DomainFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class OsTypes:

    def list(self, apiclient, **kwargs):
        pass

class Snapshot:

    def create(self, apiclient, SnapshotFactory, volumeid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Router:

    def destroy(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

class IsoPermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicy:

    def create(self, apiclient, LBStickinessPolicyFactory, lbruleid, methodname, name, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class InstanceGroup:

    def create(self, apiclient, InstanceGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Cluster:

    def add(self, apiclient, clustername, hypervisor, zoneid, clustertype, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountFromProject:

    def delete(self, apiclient, projectid, account, **kwargs):
        pass

class Apis:

    def list(self, apiclient, **kwargs):
        pass

class TrafficMonitor:

    def add(self, apiclient, url, zoneid, **kwargs):
        pass

    def list(self, apiclient, zoneid, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capabilities:

    def list(self, apiclient):
        pass

class NiciraNvpDevice:

    def add(self, apiclient, username, physicalnetworkid, password, hostname, transportzoneuuid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, nvpdeviceid, **kwargs):
        pass

class SnapshotPolicy:

    def create(self, apiclient, SnapshotPolicyFactory, timezone, maxsnaps, schedule, volumeid, intervaltype, **kwargs):
        pass

class IpAddress:

    def disassociate(self, apiclient, id, **kwargs):
        pass

    def associate(self, apiclient, **kwargs):
        pass

class ResourceLimit:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, resourcetype, **kwargs):
        pass

class DefaultZoneForAccount:

    def mark(self, apiclient, account, domainid, zoneid, **kwargs):
        pass

class Volume:

    def migrate(self, apiclient, storageid, volumeid, **kwargs):
        pass

    def create(self, apiclient, VolumeFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def upload(self, apiclient, url, zoneid, name, format, **kwargs):
        pass

    def attach(self, apiclient, id, virtualmachineid, **kwargs):
        pass

    def detach(self, apiclient, **kwargs):
        pass

    def extract(self, apiclient, zoneid, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPC:

    def create(self, apiclient, VPCFactory, cidr, zoneid, displaytext, name, vpcofferingid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def restart(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnGateway:

    def create(self, apiclient, VpnGatewayFactory, vpcid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class TrafficTypeImplementors:

    def list(self, apiclient, **kwargs):
        pass

class VpnConnection:

    def reset(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, VpnConnectionFactory, s2scustomergatewayid, s2svpngatewayid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class CustomCertificate:

    def upload(self, apiclient, domainsuffix, certificate, **kwargs):
        pass

class UsageRecords:

    def list(self, apiclient, startdate, enddate, **kwargs):
        pass

    def generate(self, apiclient, startdate, enddate, **kwargs):
        pass

class StaticNat:

    def enable(self, apiclient, ipaddressid, virtualmachineid, **kwargs):
        pass

    def disable(self, apiclient, ipaddressid, **kwargs):
        pass

class VlanIpRange:

    def create(self, apiclient, VlanIpRangeFactory, startip, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScalePolicy:

    def create(self, apiclient, AutoScalePolicyFactory, action, duration, conditionids, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobs:

    def list(self, apiclient, **kwargs):
        pass

class Remove:

    def ldap(self, apiclient):
        pass

class Iso:

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def register(self, apiclient, url, displaytext, name, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def attach(self, apiclient, id, virtualmachineid, **kwargs):
        pass

    def detach(self, apiclient, virtualmachineid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnUser:

    def add(self, apiclient, username, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def remove(self, apiclient, username, **kwargs):
        pass

class SSHKeyPair:

    def create(self, apiclient, SSHKeyPairFactory, name, **kwargs):
        pass

    def register(self, apiclient, publickey, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, name, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScaleVmProfile:

    def create(self, apiclient, AutoScaleVmProfileFactory, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class SnapshotPolicies:

    def list(self, apiclient, volumeid, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class FromLoadBalancerRule:

    def remove(self, apiclient, id, virtualmachineids, **kwargs):
        pass

class FirewallRule:

    def create(self, apiclient, FirewallRuleFactory, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountToProject:

    def add(self, apiclient, projectid, **kwargs):
        pass

class SecondaryStorage:

    def add(self, apiclient, url, **kwargs):
        pass

class PortForwardingRule:

    def create(self, apiclient, PortForwardingRuleFactory, publicport, virtualmachineid, protocol, ipaddressid, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, publicport, protocol, ipaddressid, privateport, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class ServiceOffering:

    def create(self, apiclient, ServiceOfferingFactory, displaytext, memory, cpunumber, name, cpuspeed, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capacity:

    def list(self, apiclient, **kwargs):
        pass

class S3:

    def add(self, apiclient, secretkey, accesskey, bucket, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class Alerts:

    def list(self, apiclient, **kwargs):
        pass

class ServiceForRouter:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class SecurityGroup:

    def create(self, apiclient, SecurityGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class TrafficType:

    def add(self, apiclient, traffictype, physicalnetworkid, **kwargs):
        pass

    def list(self, apiclient, physicalnetworkid, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class EventTypes:

    def list(self, apiclient):
        pass

class Config:

    def ldap(self, apiclient, queryfilter, hostname, searchbase, **kwargs):
        pass

class Events:

    def list(self, apiclient, **kwargs):
        pass

class Network:

    def create(self, apiclient, NetworkFactory, displaytext, name, networkofferingid, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def restart(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Tags:

    def create(self, apiclient, TagsFactory, resourcetype, resourceids, tags, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, resourcetype, resourceids, **kwargs):
        pass

class SecurityGroupIngress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScaleVmProfile:

    def create(self, apiclient, AutoScaleVmProfileFactory, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class SnapshotPolicies:

    def list(self, apiclient, volumeid, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class FromLoadBalancerRule:

    def remove(self, apiclient, id, virtualmachineids, **kwargs):
        pass

class FirewallRule:

    def create(self, apiclient, FirewallRuleFactory, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountToProject:

    def add(self, apiclient, projectid, **kwargs):
        pass

class SecondaryStorage:

    def add(self, apiclient, url, **kwargs):
        pass

class PortForwardingRule:

    def create(self, apiclient, PortForwardingRuleFactory, publicport, virtualmachineid, protocol, ipaddressid, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, publicport, protocol, ipaddressid, privateport, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class ServiceOffering:

    def create(self, apiclient, ServiceOfferingFactory, displaytext, memory, cpunumber, name, cpuspeed, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capacity:

    def list(self, apiclient, **kwargs):
        pass

class S3:

    def add(self, apiclient, secretkey, accesskey, bucket, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class Alerts:

    def list(self, apiclient, **kwargs):
        pass

class ServiceForRouter:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class SecurityGroup:

    def create(self, apiclient, SecurityGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class TrafficType:

    def add(self, apiclient, traffictype, physicalnetworkid, **kwargs):
        pass

    def list(self, apiclient, physicalnetworkid, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class EventTypes:

    def list(self, apiclient):
        pass

class Config:

    def ldap(self, apiclient, queryfilter, hostname, searchbase, **kwargs):
        pass

class Events:

    def list(self, apiclient, **kwargs):
        pass

class Network:

    def create(self, apiclient, NetworkFactory, displaytext, name, networkofferingid, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def restart(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Tags:

    def create(self, apiclient, TagsFactory, resourcetype, resourceids, tags, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, resourcetype, resourceids, **kwargs):
        pass

class SecurityGroupIngress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class CloudIdentifier:

    def get(self, apiclient, userid, **kwargs):
        pass

class User:

    def enable(self, apiclient, id, **kwargs):
        pass

    def get(self, apiclient, userapikey, **kwargs):
        pass

    def lock(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, UserFactory, username, account, firstname, lastname, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Condition:

    def create(self, apiclient, ConditionFactory, threshold, relationaloperator, counterid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UserKeys:

    def register(self, apiclient, id, **kwargs):
        pass

class PrivateGateway:

    def create(self, apiclient, PrivateGatewayFactory, netmask, vlan, ipaddress, gateway, vpcid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Domain:

    def create(self, apiclient, DomainFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class OsTypes:

    def list(self, apiclient, **kwargs):
        pass

class Snapshot:

    def create(self, apiclient, SnapshotFactory, volumeid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Router:

    def destroy(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

class IsoPermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicy:

    def create(self, apiclient, LBStickinessPolicyFactory, lbruleid, methodname, name, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class InstanceGroup:

    def create(self, apiclient, InstanceGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Cluster:

    def add(self, apiclient, clustername, hypervisor, zoneid, clustertype, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountFromProject:

    def delete(self, apiclient, projectid, account, **kwargs):
        pass

class Apis:

    def list(self, apiclient, **kwargs):
        pass

class TrafficMonitor:

    def add(self, apiclient, url, zoneid, **kwargs):
        pass

    def list(self, apiclient, zoneid, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capabilities:

    def list(self, apiclient):
        pass

class NiciraNvpDevice:

    def add(self, apiclient, username, physicalnetworkid, password, hostname, transportzoneuuid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, nvpdeviceid, **kwargs):
        pass

class SnapshotPolicy:

    def create(self, apiclient, SnapshotPolicyFactory, timezone, maxsnaps, schedule, volumeid, intervaltype, **kwargs):
        pass

class IpAddress:

    def disassociate(self, apiclient, id, **kwargs):
        pass

    def associate(self, apiclient, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScaleVmProfile:

    def create(self, apiclient, AutoScaleVmProfileFactory, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class SnapshotPolicies:

    def list(self, apiclient, volumeid, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class FromLoadBalancerRule:

    def remove(self, apiclient, id, virtualmachineids, **kwargs):
        pass

class FirewallRule:

    def create(self, apiclient, FirewallRuleFactory, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountToProject:

    def add(self, apiclient, projectid, **kwargs):
        pass

class SecondaryStorage:

    def add(self, apiclient, url, **kwargs):
        pass

class PortForwardingRule:

    def create(self, apiclient, PortForwardingRuleFactory, publicport, virtualmachineid, protocol, ipaddressid, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, publicport, protocol, ipaddressid, privateport, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class ServiceOffering:

    def create(self, apiclient, ServiceOfferingFactory, displaytext, memory, cpunumber, name, cpuspeed, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capacity:

    def list(self, apiclient, **kwargs):
        pass

class S3:

    def add(self, apiclient, secretkey, accesskey, bucket, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class Alerts:

    def list(self, apiclient, **kwargs):
        pass

class ServiceForRouter:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class SecurityGroup:

    def create(self, apiclient, SecurityGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class TrafficType:

    def add(self, apiclient, traffictype, physicalnetworkid, **kwargs):
        pass

    def list(self, apiclient, physicalnetworkid, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class EventTypes:

    def list(self, apiclient):
        pass

class Config:

    def ldap(self, apiclient, queryfilter, hostname, searchbase, **kwargs):
        pass

class Events:

    def list(self, apiclient, **kwargs):
        pass

class Network:

    def create(self, apiclient, NetworkFactory, displaytext, name, networkofferingid, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def restart(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScaleVmProfile:

    def create(self, apiclient, AutoScaleVmProfileFactory, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class SnapshotPolicies:

    def list(self, apiclient, volumeid, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class FromLoadBalancerRule:

    def remove(self, apiclient, id, virtualmachineids, **kwargs):
        pass

class FirewallRule:

    def create(self, apiclient, FirewallRuleFactory, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountToProject:

    def add(self, apiclient, projectid, **kwargs):
        pass

class SecondaryStorage:

    def add(self, apiclient, url, **kwargs):
        pass

class PortForwardingRule:

    def create(self, apiclient, PortForwardingRuleFactory, publicport, virtualmachineid, protocol, ipaddressid, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, publicport, protocol, ipaddressid, privateport, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class ServiceOffering:

    def create(self, apiclient, ServiceOfferingFactory, displaytext, memory, cpunumber, name, cpuspeed, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capacity:

    def list(self, apiclient, **kwargs):
        pass

class S3:

    def add(self, apiclient, secretkey, accesskey, bucket, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class Alerts:

    def list(self, apiclient, **kwargs):
        pass

class ServiceForRouter:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class SecurityGroup:

    def create(self, apiclient, SecurityGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class TrafficType:

    def add(self, apiclient, traffictype, physicalnetworkid, **kwargs):
        pass

    def list(self, apiclient, physicalnetworkid, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class EventTypes:

    def list(self, apiclient):
        pass

class Config:

    def ldap(self, apiclient, queryfilter, hostname, searchbase, **kwargs):
        pass

class Events:

    def list(self, apiclient, **kwargs):
        pass

class Network:

    def create(self, apiclient, NetworkFactory, displaytext, name, networkofferingid, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def restart(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Tags:

    def create(self, apiclient, TagsFactory, resourcetype, resourceids, tags, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, resourcetype, resourceids, **kwargs):
        pass

class SecurityGroupIngress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class CloudIdentifier:

    def get(self, apiclient, userid, **kwargs):
        pass

class User:

    def enable(self, apiclient, id, **kwargs):
        pass

    def get(self, apiclient, userapikey, **kwargs):
        pass

    def lock(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, UserFactory, username, account, firstname, lastname, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Condition:

    def create(self, apiclient, ConditionFactory, threshold, relationaloperator, counterid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UserKeys:

    def register(self, apiclient, id, **kwargs):
        pass

class PrivateGateway:

    def create(self, apiclient, PrivateGatewayFactory, netmask, vlan, ipaddress, gateway, vpcid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Domain:

    def create(self, apiclient, DomainFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class OsTypes:

    def list(self, apiclient, **kwargs):
        pass

class Snapshot:

    def create(self, apiclient, SnapshotFactory, volumeid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Router:

    def destroy(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

class IsoPermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicy:

    def create(self, apiclient, LBStickinessPolicyFactory, lbruleid, methodname, name, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class InstanceGroup:

    def create(self, apiclient, InstanceGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Cluster:

    def add(self, apiclient, clustername, hypervisor, zoneid, clustertype, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountFromProject:

    def delete(self, apiclient, projectid, account, **kwargs):
        pass

class Apis:

    def list(self, apiclient, **kwargs):
        pass

class TrafficMonitor:

    def add(self, apiclient, url, zoneid, **kwargs):
        pass

    def list(self, apiclient, zoneid, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capabilities:

    def list(self, apiclient):
        pass

class NiciraNvpDevice:

    def add(self, apiclient, username, physicalnetworkid, password, hostname, transportzoneuuid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, nvpdeviceid, **kwargs):
        pass

class SnapshotPolicy:

    def create(self, apiclient, SnapshotPolicyFactory, timezone, maxsnaps, schedule, volumeid, intervaltype, **kwargs):
        pass

class IpAddress:

    def disassociate(self, apiclient, id, **kwargs):
        pass

    def associate(self, apiclient, **kwargs):
        pass

class ResourceLimit:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, resourcetype, **kwargs):
        pass

class DefaultZoneForAccount:

    def mark(self, apiclient, account, domainid, zoneid, **kwargs):
        pass

class Volume:

    def migrate(self, apiclient, storageid, volumeid, **kwargs):
        pass

    def create(self, apiclient, VolumeFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def upload(self, apiclient, url, zoneid, name, format, **kwargs):
        pass

    def attach(self, apiclient, id, virtualmachineid, **kwargs):
        pass

    def detach(self, apiclient, **kwargs):
        pass

    def extract(self, apiclient, zoneid, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPC:

    def create(self, apiclient, VPCFactory, cidr, zoneid, displaytext, name, vpcofferingid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def restart(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScaleVmProfile:

    def create(self, apiclient, AutoScaleVmProfileFactory, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class SnapshotPolicies:

    def list(self, apiclient, volumeid, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class FromLoadBalancerRule:

    def remove(self, apiclient, id, virtualmachineids, **kwargs):
        pass

class FirewallRule:

    def create(self, apiclient, FirewallRuleFactory, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountToProject:

    def add(self, apiclient, projectid, **kwargs):
        pass

class SecondaryStorage:

    def add(self, apiclient, url, **kwargs):
        pass

class PortForwardingRule:

    def create(self, apiclient, PortForwardingRuleFactory, publicport, virtualmachineid, protocol, ipaddressid, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, publicport, protocol, ipaddressid, privateport, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class ServiceOffering:

    def create(self, apiclient, ServiceOfferingFactory, displaytext, memory, cpunumber, name, cpuspeed, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capacity:

    def list(self, apiclient, **kwargs):
        pass

class S3:

    def add(self, apiclient, secretkey, accesskey, bucket, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class Alerts:

    def list(self, apiclient, **kwargs):
        pass

class ServiceForRouter:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class SecurityGroup:

    def create(self, apiclient, SecurityGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class TrafficType:

    def add(self, apiclient, traffictype, physicalnetworkid, **kwargs):
        pass

    def list(self, apiclient, physicalnetworkid, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class EventTypes:

    def list(self, apiclient):
        pass

class Config:

    def ldap(self, apiclient, queryfilter, hostname, searchbase, **kwargs):
        pass

class Events:

    def list(self, apiclient, **kwargs):
        pass

class Network:

    def create(self, apiclient, NetworkFactory, displaytext, name, networkofferingid, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def restart(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Tags:

    def create(self, apiclient, TagsFactory, resourcetype, resourceids, tags, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, resourcetype, resourceids, **kwargs):
        pass

class SecurityGroupIngress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class CloudIdentifier:

    def get(self, apiclient, userid, **kwargs):
        pass

class User:

    def enable(self, apiclient, id, **kwargs):
        pass

    def get(self, apiclient, userapikey, **kwargs):
        pass

    def lock(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, UserFactory, username, account, firstname, lastname, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Condition:

    def create(self, apiclient, ConditionFactory, threshold, relationaloperator, counterid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UserKeys:

    def register(self, apiclient, id, **kwargs):
        pass

class PrivateGateway:

    def create(self, apiclient, PrivateGatewayFactory, netmask, vlan, ipaddress, gateway, vpcid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Domain:

    def create(self, apiclient, DomainFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class OsTypes:

    def list(self, apiclient, **kwargs):
        pass

class Snapshot:

    def create(self, apiclient, SnapshotFactory, volumeid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Router:

    def destroy(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

class IsoPermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicy:

    def create(self, apiclient, LBStickinessPolicyFactory, lbruleid, methodname, name, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class InstanceGroup:

    def create(self, apiclient, InstanceGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Cluster:

    def add(self, apiclient, clustername, hypervisor, zoneid, clustertype, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountFromProject:

    def delete(self, apiclient, projectid, account, **kwargs):
        pass

class Apis:

    def list(self, apiclient, **kwargs):
        pass

class TrafficMonitor:

    def add(self, apiclient, url, zoneid, **kwargs):
        pass

    def list(self, apiclient, zoneid, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capabilities:

    def list(self, apiclient):
        pass

class NiciraNvpDevice:

    def add(self, apiclient, username, physicalnetworkid, password, hostname, transportzoneuuid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, nvpdeviceid, **kwargs):
        pass

class SnapshotPolicy:

    def create(self, apiclient, SnapshotPolicyFactory, timezone, maxsnaps, schedule, volumeid, intervaltype, **kwargs):
        pass

class IpAddress:

    def disassociate(self, apiclient, id, **kwargs):
        pass

    def associate(self, apiclient, **kwargs):
        pass

class ResourceLimit:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, resourcetype, **kwargs):
        pass

class DefaultZoneForAccount:

    def mark(self, apiclient, account, domainid, zoneid, **kwargs):
        pass

class Volume:

    def migrate(self, apiclient, storageid, volumeid, **kwargs):
        pass

    def create(self, apiclient, VolumeFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def upload(self, apiclient, url, zoneid, name, format, **kwargs):
        pass

    def attach(self, apiclient, id, virtualmachineid, **kwargs):
        pass

    def detach(self, apiclient, **kwargs):
        pass

    def extract(self, apiclient, zoneid, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPC:

    def create(self, apiclient, VPCFactory, cidr, zoneid, displaytext, name, vpcofferingid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def restart(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnGateway:

    def create(self, apiclient, VpnGatewayFactory, vpcid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class TrafficTypeImplementors:

    def list(self, apiclient, **kwargs):
        pass

class VpnConnection:

    def reset(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, VpnConnectionFactory, s2scustomergatewayid, s2svpngatewayid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class CustomCertificate:

    def upload(self, apiclient, domainsuffix, certificate, **kwargs):
        pass

class UsageRecords:

    def list(self, apiclient, startdate, enddate, **kwargs):
        pass

    def generate(self, apiclient, startdate, enddate, **kwargs):
        pass

class StaticNat:

    def enable(self, apiclient, ipaddressid, virtualmachineid, **kwargs):
        pass

    def disable(self, apiclient, ipaddressid, **kwargs):
        pass

class VlanIpRange:

    def create(self, apiclient, VlanIpRangeFactory, startip, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScalePolicy:

    def create(self, apiclient, AutoScalePolicyFactory, action, duration, conditionids, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobs:

    def list(self, apiclient, **kwargs):
        pass

class Remove:

    def ldap(self, apiclient):
        pass

class Iso:

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def register(self, apiclient, url, displaytext, name, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def attach(self, apiclient, id, virtualmachineid, **kwargs):
        pass

    def detach(self, apiclient, virtualmachineid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnUser:

    def add(self, apiclient, username, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def remove(self, apiclient, username, **kwargs):
        pass

class SSHKeyPair:

    def create(self, apiclient, SSHKeyPairFactory, name, **kwargs):
        pass

    def register(self, apiclient, publickey, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, name, **kwargs):
        pass

class PhysicalNetwork:

    def create(self, apiclient, PhysicalNetworkFactory, name, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class IpForwardingRule:

    def create(self, apiclient, IpForwardingRuleFactory, startport, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class ProjectInvitation:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, projectid, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Hypervisors:

    def list(self, apiclient, **kwargs):
        pass

class ToLoadBalancerRule:

    def assign(self, apiclient, id, virtualmachineids, **kwargs):
        pass

class DomainChildren:

    def list(self, apiclient, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScaleVmProfile:

    def create(self, apiclient, AutoScaleVmProfileFactory, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class SnapshotPolicies:

    def list(self, apiclient, volumeid, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class FromLoadBalancerRule:

    def remove(self, apiclient, id, virtualmachineids, **kwargs):
        pass

class FirewallRule:

    def create(self, apiclient, FirewallRuleFactory, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountToProject:

    def add(self, apiclient, projectid, **kwargs):
        pass

class SecondaryStorage:

    def add(self, apiclient, url, **kwargs):
        pass

class PortForwardingRule:

    def create(self, apiclient, PortForwardingRuleFactory, publicport, virtualmachineid, protocol, ipaddressid, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, publicport, protocol, ipaddressid, privateport, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class ServiceOffering:

    def create(self, apiclient, ServiceOfferingFactory, displaytext, memory, cpunumber, name, cpuspeed, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capacity:

    def list(self, apiclient, **kwargs):
        pass

class S3:

    def add(self, apiclient, secretkey, accesskey, bucket, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class Alerts:

    def list(self, apiclient, **kwargs):
        pass

class ServiceForRouter:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class SecurityGroup:

    def create(self, apiclient, SecurityGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class TrafficType:

    def add(self, apiclient, traffictype, physicalnetworkid, **kwargs):
        pass

    def list(self, apiclient, physicalnetworkid, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class EventTypes:

    def list(self, apiclient):
        pass

class Config:

    def ldap(self, apiclient, queryfilter, hostname, searchbase, **kwargs):
        pass

class Events:

    def list(self, apiclient, **kwargs):
        pass

class Network:

    def create(self, apiclient, NetworkFactory, displaytext, name, networkofferingid, zoneid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def restart(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Tags:

    def create(self, apiclient, TagsFactory, resourcetype, resourceids, tags, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, resourcetype, resourceids, **kwargs):
        pass

class SecurityGroupIngress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class CloudIdentifier:

    def get(self, apiclient, userid, **kwargs):
        pass

class User:

    def enable(self, apiclient, id, **kwargs):
        pass

    def get(self, apiclient, userapikey, **kwargs):
        pass

    def lock(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, UserFactory, username, account, firstname, lastname, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Condition:

    def create(self, apiclient, ConditionFactory, threshold, relationaloperator, counterid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UserKeys:

    def register(self, apiclient, id, **kwargs):
        pass

class PrivateGateway:

    def create(self, apiclient, PrivateGatewayFactory, netmask, vlan, ipaddress, gateway, vpcid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Domain:

    def create(self, apiclient, DomainFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class OsTypes:

    def list(self, apiclient, **kwargs):
        pass

class Snapshot:

    def create(self, apiclient, SnapshotFactory, volumeid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Router:

    def destroy(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

class IsoPermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicy:

    def create(self, apiclient, LBStickinessPolicyFactory, lbruleid, methodname, name, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class InstanceGroup:

    def create(self, apiclient, InstanceGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Cluster:

    def add(self, apiclient, clustername, hypervisor, zoneid, clustertype, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountFromProject:

    def delete(self, apiclient, projectid, account, **kwargs):
        pass

class Apis:

    def list(self, apiclient, **kwargs):
        pass

class TrafficMonitor:

    def add(self, apiclient, url, zoneid, **kwargs):
        pass

    def list(self, apiclient, zoneid, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capabilities:

    def list(self, apiclient):
        pass

class NiciraNvpDevice:

    def add(self, apiclient, username, physicalnetworkid, password, hostname, transportzoneuuid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, nvpdeviceid, **kwargs):
        pass

class SnapshotPolicy:

    def create(self, apiclient, SnapshotPolicyFactory, timezone, maxsnaps, schedule, volumeid, intervaltype, **kwargs):
        pass

class IpAddress:

    def disassociate(self, apiclient, id, **kwargs):
        pass

    def associate(self, apiclient, **kwargs):
        pass

class ResourceLimit:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, resourcetype, **kwargs):
        pass

class DefaultZoneForAccount:

    def mark(self, apiclient, account, domainid, zoneid, **kwargs):
        pass

class Volume:

    def migrate(self, apiclient, storageid, volumeid, **kwargs):
        pass

    def create(self, apiclient, VolumeFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def upload(self, apiclient, url, zoneid, name, format, **kwargs):
        pass

    def attach(self, apiclient, id, virtualmachineid, **kwargs):
        pass

    def detach(self, apiclient, **kwargs):
        pass

    def extract(self, apiclient, zoneid, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPC:

    def create(self, apiclient, VPCFactory, cidr, zoneid, displaytext, name, vpcofferingid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def restart(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnGateway:

    def create(self, apiclient, VpnGatewayFactory, vpcid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class TrafficTypeImplementors:

    def list(self, apiclient, **kwargs):
        pass

class VpnConnection:

    def reset(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, VpnConnectionFactory, s2scustomergatewayid, s2svpngatewayid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class CustomCertificate:

    def upload(self, apiclient, domainsuffix, certificate, **kwargs):
        pass

class UsageRecords:

    def list(self, apiclient, startdate, enddate, **kwargs):
        pass

    def generate(self, apiclient, startdate, enddate, **kwargs):
        pass

class StaticNat:

    def enable(self, apiclient, ipaddressid, virtualmachineid, **kwargs):
        pass

    def disable(self, apiclient, ipaddressid, **kwargs):
        pass

class VlanIpRange:

    def create(self, apiclient, VlanIpRangeFactory, startip, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScalePolicy:

    def create(self, apiclient, AutoScalePolicyFactory, action, duration, conditionids, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobs:

    def list(self, apiclient, **kwargs):
        pass


class SystemVm:

    def migrate(self, apiclient, hostid, virtualmachineid, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

class SecurityGroupEgress:

    def authorize(self, apiclient, **kwargs):
        pass

    def revoke(self, apiclient, id, **kwargs):
        pass

class HostForMaintenance:

    def prepare(self, apiclient, id, **kwargs):
        pass

class HostPassword:

    def update(self, apiclient, username, password, **kwargs):
        pass

class PasswordForVirtualMachine:

    def reset(self, apiclient, id, **kwargs):
        pass

class ResourceCount:

    def update(self, apiclient, domainid, **kwargs):
        pass

class OsCategories:

    def list(self, apiclient, **kwargs):
        pass

class SupportedNetworkServices:

    def list(self, apiclient, **kwargs):
        pass

class LoadBalancerRuleInstances:

    def list(self, apiclient, id, **kwargs):
        pass

class Host:

    def add(self, apiclient, username, podid, url, hypervisor, zoneid, password, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def reconnect(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class UsageTypes:

    def list(self, apiclient):
        pass

class Account:

    def enable(self, apiclient, **kwargs):
        pass

    def lock(self, apiclient, account, domainid, **kwargs):
        pass

    def create(self, apiclient, AccountFactory, username, firstname, lastname, accounttype, password, email, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, newname, **kwargs):
        pass

    def disable(self, apiclient, lock, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkACL:

    def create(self, apiclient, NetworkACLFactory, networkid, protocol, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualMachine:

    def restore(self, apiclient, virtualmachineid, **kwargs):
        pass

    def deploy(self, apiclient, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def migrate(self, apiclient, virtualmachineid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def stop(self, apiclient, id, **kwargs):
        pass

    def reboot(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def start(self, apiclient, id, **kwargs):
        pass

    def destroy(self, apiclient, id, **kwargs):
        pass

    def assign(self, apiclient, account, domainid, virtualmachineid, **kwargs):
        pass

class RemoteAccessVpn:

    def create(self, apiclient, RemoteAccessVpnFactory, publicipid, **kwargs):
        pass

    def list(self, apiclient, publicipid, **kwargs):
        pass

    def delete(self, apiclient, publicipid, **kwargs):
        pass

class Project:

    def suspend(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, ProjectFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def activate(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AsyncJobResult:

    def query(self, apiclient, jobid, **kwargs):
        pass

class NetworkDevice:

    def add(self, apiclient, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VirtualRouterElement:

    def create(self, apiclient, VirtualRouterElementFactory, nspid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def configure(self, apiclient, enabled, id, **kwargs):
        pass

class StorageNetworkIpRange:

    def create(self, apiclient, StorageNetworkIpRangeFactory, startip, netmask, gateway, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VpnCustomerGateway:

    def create(self, apiclient, VpnCustomerGatewayFactory, ipsecpsk, cidrlist, esppolicy, ikepolicy, gateway, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, ikepolicy, cidrlist, gateway, ipsecpsk, esppolicy, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LoadBalancerRule:

    def create(self, apiclient, LoadBalancerRuleFactory, publicport, name, algorithm, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VPCOffering:

    def create(self, apiclient, VPCOfferingFactory, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class LBStickinessPolicies:

    def list(self, apiclient, lbruleid, **kwargs):
        pass

class ServiceForVirtualMachine:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class AutoScalePolicies:

    def list(self, apiclient, **kwargs):
        pass

class NiciraNvpDeviceNetworks:

    def list(self, apiclient, nvpdeviceid, **kwargs):
        pass

class HypervisorCapabilities:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

class ProjectAccounts:

    def list(self, apiclient, projectid, **kwargs):
        pass

class DiskOffering:

    def create(self, apiclient, DiskOfferingFactory, displaytext, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Zone:

    def create(self, apiclient, ZoneFactory, networktype, dns1, internaldns1, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StaticRoute:

    def create(self, apiclient, StaticRouteFactory, gatewayid, cidr, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class NetworkServiceProvider:

    def add(self, apiclient, physicalnetworkid, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class PublicIpAddresses:

    def list(self, apiclient, **kwargs):
        pass

class NetworkOffering:

    def create(self, apiclient, NetworkOfferingFactory, guestiptype, traffictype, displaytext, name, supportedservices, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class HostMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

class TemplatePermissions:

    def list(self, apiclient, id, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

class StoragePool:

    def create(self, apiclient, StoragePoolFactory, url, zoneid, clusterid, name, podid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class StorageMaintenance:

    def cancel(self, apiclient, id, **kwargs):
        pass

    def enable(self, apiclient, id, **kwargs):
        pass

class Template:

    def prepare(self, apiclient, zoneid, templateid, **kwargs):
        pass

    def create(self, apiclient, TemplateFactory, displaytext, name, ostypeid, **kwargs):
        pass

    def register(self, apiclient, name, format, url, hypervisor, zoneid, displaytext, ostypeid, **kwargs):
        pass

    def list(self, apiclient, templatefilter, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def copy(self, apiclient, sourcezoneid, id, destzoneid, **kwargs):
        pass

    def extract(self, apiclient, id, mode, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Configuration:

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, name, **kwargs):
        pass

class Swift:

    def add(self, apiclient, url, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class AutoScaleVmGroup:

    def enable(self, apiclient, id, **kwargs):
        pass

    def create(self, apiclient, AutoScaleVmGroupFactory, scaledownpolicyids, maxmembers, scaleuppolicyids, vmprofileid, minmembers, lbruleid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def disable(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class VMPassword:

    def get(self, apiclient, id, **kwargs):
        pass

class Counter:

    def create(self, apiclient, CounterFactory, source, name, value, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AutoScaleVmProfile:

    def create(self, apiclient, AutoScaleVmProfileFactory, zoneid, serviceofferingid, templateid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class SnapshotPolicies:

    def list(self, apiclient, volumeid, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class FromLoadBalancerRule:

    def remove(self, apiclient, id, virtualmachineids, **kwargs):
        pass

class FirewallRule:

    def create(self, apiclient, FirewallRuleFactory, protocol, ipaddressid, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class AccountToProject:

    def add(self, apiclient, projectid, **kwargs):
        pass

class SecondaryStorage:

    def add(self, apiclient, url, **kwargs):
        pass

class PortForwardingRule:

    def create(self, apiclient, PortForwardingRuleFactory, publicport, virtualmachineid, protocol, ipaddressid, privateport, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, publicport, protocol, ipaddressid, privateport, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class ServiceOffering:

    def create(self, apiclient, ServiceOfferingFactory, displaytext, memory, cpunumber, name, cpuspeed, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class Capacity:

    def list(self, apiclient, **kwargs):
        pass

class S3:

    def add(self, apiclient, secretkey, accesskey, bucket, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

class Alerts:

    def list(self, apiclient, **kwargs):
        pass

class ServiceForRouter:

    def change(self, apiclient, id, serviceofferingid, **kwargs):
        pass

class SecurityGroup:

    def create(self, apiclient, SecurityGroupFactory, name, **kwargs):
        pass

    def list(self, apiclient, **kwargs):
        pass

    def delete(self, apiclient, **kwargs):
        pass

class TrafficType:

    def add(self, apiclient, traffictype, physicalnetworkid, **kwargs):
        pass

    def list(self, apiclient, physicalnetworkid, **kwargs):
        pass

    def update(self, apiclient, id, **kwargs):
        pass

    def delete(self, apiclient, id, **kwargs):
        pass

class EventTypes:

    def list(self, apiclient):
        pass

class Config:

    def ldap(self, apiclient, queryfilter, hostname, searchbase, **kwargs):
        pass
